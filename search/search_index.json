{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#introduction","title":"Introduction","text":"<p>OfficialEye is an advanced tool designed to extract information from flat documents, such as passports or application forms, through image analysis. Leveraging state-of-the-art symbolic AI techniques, OfficialEye empowers users to effortlessly transform raw images into standardized canonical forms, facilitating the seamless extraction and processing of crucial information.</p>"},{"location":"#key-features","title":"Key features","text":"<ul> <li> <p> Example-driven and user-friendly</p> <p>OfficialEye boasts an intuitive and example-driven approach. As a user, all you need to do is provide an image of a sample document and articulate which parts contain information you are interested in, and which can be used to recognize similar documents. The tool automatically generalizes from your example, making it a user-friendly solution for various document recognition tasks.</p> </li> <li> <p> Powerful template system</p> <p>Templates encapsulate the nuances of document analysis and processing. Multiple document types are effortlessly managed by employing distinct templates, each configurable through a potent YAML-based scripting language. It allows you to express the contents of your documents comprehensively yet concisely, ensuring maintainability even for complex documents with numerous entries.</p> </li> <li> <p> Highly modular and customizable</p> <p>OfficialEye prioritizes modularity and customization. Each step of the image analysis process is separated and explained. The template scripting language allows users to switch between implementations of every component on-the-fly, without the need for recompilation. Inject custom implementations easily, tailoring the tool to your specific needs.</p> </li> <li> <p> Consistency-driven detection</p> <p>Out-of-the box, OfficialEye's supports an innovative consistency-driven detection approach, finely tuned for flat documents. Imagine the human ability to detect formatted documents at a glance: with an innate understanding of how a document appears, our brain effortlessly filters out incongruent elements. OfficialEye mirrors this by operating under the assumption that the document in the image is a flat surface, and leveraging this inherent knowledge to significantly enhance the accuracy of the results.</p> </li> <li> <p> Visualizations</p> <p>OfficialEye offers a debugging mode wherein integrated algorithms generate graphical visualizations, providing users with a transparent view of the tool's internal processes. In case of issues, these visualizations serve as a diagnostic aid, swiftly pinpointing areas for improvement and thus enhancing your document analysis experience.</p> </li> <li> <p> Free and open source</p> <p>Say goodbye to proprietary alternatives. OfficialEye is committed to the principles of freedom and transparency. Released under the GNU GPL-3.0 license, it provides a free and open-source alternative, ensuring accessibility for all users.</p> <p> License</p> </li> </ul> <p>Whether you're a developer, data scientist, or enthusiast, OfficialEye is your go-to solution for accurate and efficient flat document analysis. Experience the future of document analysis with OfficialEye!</p> <p>Examples Getting started</p>"},{"location":"api/","title":"Index","text":"<p>This module contains everything that should be visible to the API user at the top level of imports, i.e., all symbols that should be importable via <code>from officialeye import symbol</code></p>"},{"location":"api/config/","title":"Config","text":"<p>Module for abstracting out the ability to inject custom configurations specified using dictionaries. The goal of this module is to provide a nice API for validated user-specified configurations and safely retrieving information from there.</p>"},{"location":"api/context/","title":"Context","text":"<p>Module represeting the OfficialEye context.</p>"},{"location":"api/detection/","title":"Detection","text":""},{"location":"api/future/","title":"Future","text":""},{"location":"api/future/#officialeye._api.future.Future","title":"<code>Future</code>","text":"Source code in <code>src/officialeye/_api/future.py</code> <pre><code>class Future:\n\n    def __init__(self, context: Context, python_future: PythonFuture, /, *, afi_fork: AbstractFeedbackInterface):\n        self._context = context\n        self._future = python_future\n        self._afi_fork = afi_fork\n\n        self._afi_joined = False\n\n    def cancel(self) -&gt; bool:\n        \"\"\"\n        Attempt to cancel the call.\n        If the call is currently being executed and cannot be canceled, then the method will return False,\n        otherwise the call will be canceled, and the method will return True.\n        \"\"\"\n        return self._future.cancel()\n\n    def cancelled(self) -&gt; bool:\n        \"\"\" Return True if the call was successfully canceled. \"\"\"\n        return self._future.cancelled()\n\n    def running(self) -&gt; bool:\n        \"\"\" Return True if the call is currently being executed and cannot be canceled. \"\"\"\n        return self._future.running()\n\n    def done(self) -&gt; bool:\n        \"\"\" Return True if the call was successfully canceled or finished running. \"\"\"\n        return self._future.done()\n\n    def _afi_join(self):\n        if not self._afi_joined:\n            self._afi_joined = True\n            # noinspection PyProtectedMember\n            self._context._get_afi().join(self._afi_fork, self._future)\n\n    def result(self, timeout: float | None = None) -&gt; Any:\n        \"\"\"\n        Return the value returned by the call. If the call hasn\u2019t yet completed, then this method will wait up to timeout seconds.\n        If the call hasn\u2019t completed in timeout seconds, then a TimeoutError will be raised. Timeout can be an int or float.\n        If timeout is not specified or None, there is no limit to the wait time.\n\n        If the future is canceled before completing, then CancelledError will be raised.\n\n        If the call raised, this method will raise the same exception.\n        \"\"\"\n\n        result = self._future.result(timeout=timeout)\n\n        assert isinstance(result, IApiInterfaceImplementation), \\\n            \"Every call to an internal API function should return a proper public API interface implementation\"\n\n        result.set_api_context(self._context)\n\n        self._afi_join()\n\n        return result\n\n    def exception(self, timeout: float | None = None) -&gt; Any:\n        \"\"\"\n        Return the exception raised by the call.\n        If the call hasn\u2019t yet completed, then this method will wait up to timeout seconds.\n        If the call hasn\u2019t completed in timeout seconds, then a TimeoutError will be raised.\n        Timeout can be an int or float.\n        If timeout is not specified or None, there is no limit to the wait time.\n\n        If the future is canceled before completing, then CancelledError will be raised.\n\n        If the call completed without raising, None is returned.\n        \"\"\"\n\n        err = self._future.exception(timeout=timeout)\n\n        self._afi_join()\n\n        return err\n</code></pre>"},{"location":"api/future/#officialeye._api.future.Future.cancel","title":"<code>cancel()</code>","text":"<p>Attempt to cancel the call. If the call is currently being executed and cannot be canceled, then the method will return False, otherwise the call will be canceled, and the method will return True.</p> Source code in <code>src/officialeye/_api/future.py</code> <pre><code>def cancel(self) -&gt; bool:\n    \"\"\"\n    Attempt to cancel the call.\n    If the call is currently being executed and cannot be canceled, then the method will return False,\n    otherwise the call will be canceled, and the method will return True.\n    \"\"\"\n    return self._future.cancel()\n</code></pre>"},{"location":"api/future/#officialeye._api.future.Future.cancelled","title":"<code>cancelled()</code>","text":"<p>Return True if the call was successfully canceled.</p> Source code in <code>src/officialeye/_api/future.py</code> <pre><code>def cancelled(self) -&gt; bool:\n    \"\"\" Return True if the call was successfully canceled. \"\"\"\n    return self._future.cancelled()\n</code></pre>"},{"location":"api/future/#officialeye._api.future.Future.done","title":"<code>done()</code>","text":"<p>Return True if the call was successfully canceled or finished running.</p> Source code in <code>src/officialeye/_api/future.py</code> <pre><code>def done(self) -&gt; bool:\n    \"\"\" Return True if the call was successfully canceled or finished running. \"\"\"\n    return self._future.done()\n</code></pre>"},{"location":"api/future/#officialeye._api.future.Future.exception","title":"<code>exception(timeout=None)</code>","text":"<p>Return the exception raised by the call. If the call hasn\u2019t yet completed, then this method will wait up to timeout seconds. If the call hasn\u2019t completed in timeout seconds, then a TimeoutError will be raised. Timeout can be an int or float. If timeout is not specified or None, there is no limit to the wait time.</p> <p>If the future is canceled before completing, then CancelledError will be raised.</p> <p>If the call completed without raising, None is returned.</p> Source code in <code>src/officialeye/_api/future.py</code> <pre><code>def exception(self, timeout: float | None = None) -&gt; Any:\n    \"\"\"\n    Return the exception raised by the call.\n    If the call hasn\u2019t yet completed, then this method will wait up to timeout seconds.\n    If the call hasn\u2019t completed in timeout seconds, then a TimeoutError will be raised.\n    Timeout can be an int or float.\n    If timeout is not specified or None, there is no limit to the wait time.\n\n    If the future is canceled before completing, then CancelledError will be raised.\n\n    If the call completed without raising, None is returned.\n    \"\"\"\n\n    err = self._future.exception(timeout=timeout)\n\n    self._afi_join()\n\n    return err\n</code></pre>"},{"location":"api/future/#officialeye._api.future.Future.result","title":"<code>result(timeout=None)</code>","text":"<p>Return the value returned by the call. If the call hasn\u2019t yet completed, then this method will wait up to timeout seconds. If the call hasn\u2019t completed in timeout seconds, then a TimeoutError will be raised. Timeout can be an int or float. If timeout is not specified or None, there is no limit to the wait time.</p> <p>If the future is canceled before completing, then CancelledError will be raised.</p> <p>If the call raised, this method will raise the same exception.</p> Source code in <code>src/officialeye/_api/future.py</code> <pre><code>def result(self, timeout: float | None = None) -&gt; Any:\n    \"\"\"\n    Return the value returned by the call. If the call hasn\u2019t yet completed, then this method will wait up to timeout seconds.\n    If the call hasn\u2019t completed in timeout seconds, then a TimeoutError will be raised. Timeout can be an int or float.\n    If timeout is not specified or None, there is no limit to the wait time.\n\n    If the future is canceled before completing, then CancelledError will be raised.\n\n    If the call raised, this method will raise the same exception.\n    \"\"\"\n\n    result = self._future.result(timeout=timeout)\n\n    assert isinstance(result, IApiInterfaceImplementation), \\\n        \"Every call to an internal API function should return a proper public API interface implementation\"\n\n    result.set_api_context(self._context)\n\n    self._afi_join()\n\n    return result\n</code></pre>"},{"location":"api/future/#officialeye._api.future.Future.running","title":"<code>running()</code>","text":"<p>Return True if the call is currently being executed and cannot be canceled.</p> Source code in <code>src/officialeye/_api/future.py</code> <pre><code>def running(self) -&gt; bool:\n    \"\"\" Return True if the call is currently being executed and cannot be canceled. \"\"\"\n    return self._future.running()\n</code></pre>"},{"location":"api/image/","title":"Image","text":""},{"location":"api/mutator/","title":"Mutator","text":""},{"location":"api/template/","title":"Index","text":""},{"location":"api/template/feature/","title":"Feature","text":""},{"location":"api/template/feature/#officialeye._api.template.feature.IFeature","title":"<code>IFeature</code>","text":"<p>             Bases: <code>IRegion</code>, <code>ABC</code></p> Source code in <code>src/officialeye/_api/template/feature.py</code> <pre><code>class IFeature(IRegion, ABC):\n\n    def __str__(self) -&gt; str:\n        return f\"Feature '{self.identifier}'\"\n\n    @abstractmethod\n    def get_mutators(self) -&gt; Iterable[IMutator]:\n        \"\"\"\n        Returns:\n            A list of mutators from the feature class of the feature, in the order in which they are to be applied.\n        \"\"\"\n        raise NotImplementedError()\n\n    def apply_mutators_to_image(self, img: np.ndarray, /) -&gt; np.ndarray:\n        \"\"\"\n        Takes an image and applies the mutators defined in the corresponding feature class.\n\n        Arguments:\n            img: The image that should be transformed.\n\n        Returns:\n            The resulting image.\n        \"\"\"\n\n        for mutator in self.get_mutators():\n            img = mutator.mutate(img)\n\n        return img\n</code></pre>"},{"location":"api/template/feature/#officialeye._api.template.feature.IFeature.apply_mutators_to_image","title":"<code>apply_mutators_to_image(img)</code>","text":"<p>Takes an image and applies the mutators defined in the corresponding feature class.</p> <p>Parameters:</p> Name Type Description Default <code>img</code> <code>ndarray</code> <p>The image that should be transformed.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>The resulting image.</p> Source code in <code>src/officialeye/_api/template/feature.py</code> <pre><code>def apply_mutators_to_image(self, img: np.ndarray, /) -&gt; np.ndarray:\n    \"\"\"\n    Takes an image and applies the mutators defined in the corresponding feature class.\n\n    Arguments:\n        img: The image that should be transformed.\n\n    Returns:\n        The resulting image.\n    \"\"\"\n\n    for mutator in self.get_mutators():\n        img = mutator.mutate(img)\n\n    return img\n</code></pre>"},{"location":"api/template/feature/#officialeye._api.template.feature.IFeature.get_mutators","title":"<code>get_mutators()</code>  <code>abstractmethod</code>","text":"<p>Returns:</p> Type Description <code>Iterable[IMutator]</code> <p>A list of mutators from the feature class of the feature, in the order in which they are to be applied.</p> Source code in <code>src/officialeye/_api/template/feature.py</code> <pre><code>@abstractmethod\ndef get_mutators(self) -&gt; Iterable[IMutator]:\n    \"\"\"\n    Returns:\n        A list of mutators from the feature class of the feature, in the order in which they are to be applied.\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/template/interpretation/","title":"Interpretation","text":""},{"location":"api/template/interpretation_result/","title":"Interpretation result","text":""},{"location":"api/template/keypoint/","title":"Keypoint","text":""},{"location":"api/template/match/","title":"Match","text":""},{"location":"api/template/match/#officialeye._api.template.match.IMatch","title":"<code>IMatch</code>","text":"<p>             Bases: <code>ABC</code></p> Source code in <code>src/officialeye/_api/template/match.py</code> <pre><code>class IMatch(ABC):\n\n    @property\n    @abstractmethod\n    def template(self) -&gt; ITemplate:\n        raise NotImplementedError()\n\n    @property\n    @abstractmethod\n    def keypoint(self) -&gt; IKeypoint:\n        raise NotImplementedError()\n\n    @property\n    @abstractmethod\n    def keypoint_point(self) -&gt; np.ndarray:\n        raise NotImplementedError()\n\n    @property\n    @abstractmethod\n    def target_point(self) -&gt; np.ndarray:\n        raise NotImplementedError()\n\n    @abstractmethod\n    def get_score(self) -&gt; float:\n        raise NotImplementedError()\n\n    @property\n    def template_point(self) -&gt; np.ndarray:\n        \"\"\"Returns the coordinates of the point lying in the keypoint, in the coordinate system of the underlying template.\"\"\"\n        return self.keypoint_point + self.keypoint.top_left\n\n    def __str__(self) -&gt; str:\n        return (f\"Point ({self.target_point[0]}, {self.target_point[1]}) matches ({self.keypoint_point[0]}, {self.keypoint_point[1]}) \"\n                f\"in '{self.keypoint}' of '{self.template.identifier}'.\")\n\n    def __eq__(self, o: Any) -&gt; bool:\n\n        if not isinstance(o, IMatch):\n            return False\n\n        if self.template != o.template:\n            return False\n\n        if self.keypoint != o.keypoint:\n            return False\n\n        return (np.array_equal(self.keypoint_point, o.keypoint_point)\n                and np.array_equal(self.target_point, o.target_point))\n\n    def __lt__(self, o: Any) -&gt; bool:\n        assert isinstance(o, Match)\n        return self.get_score() &lt; o.get_score()\n\n    def __hash__(self):\n        return hash((\n            self.template.identifier,\n            self.keypoint.identifier,\n            np.dot(self.keypoint_point, self.keypoint_point),\n            np.dot(self.target_point, self.target_point)\n        ))\n</code></pre>"},{"location":"api/template/match/#officialeye._api.template.match.IMatch.template_point","title":"<code>template_point: np.ndarray</code>  <code>property</code>","text":"<p>Returns the coordinates of the point lying in the keypoint, in the coordinate system of the underlying template.</p>"},{"location":"api/template/matcher/","title":"Matcher","text":""},{"location":"api/template/matching_result/","title":"Matching result","text":""},{"location":"api/template/region/","title":"Region","text":""},{"location":"api/template/supervision_result/","title":"Supervision result","text":""},{"location":"api/template/supervision_result/#officialeye._api.template.supervision_result.ISupervisionResult","title":"<code>ISupervisionResult</code>","text":"<p>             Bases: <code>ABC</code></p> Source code in <code>src/officialeye/_api/template/supervision_result.py</code> <pre><code>class ISupervisionResult(ABC):\n\n    @property\n    @abstractmethod\n    def template(self) -&gt; ITemplate:\n        raise NotImplementedError()\n\n    @property\n    @abstractmethod\n    def matching_result(self) -&gt; IMatchingResult:\n        raise NotImplementedError()\n\n    @property\n    @abstractmethod\n    def score(self) -&gt; float:\n        raise NotImplementedError()\n\n    @property\n    @abstractmethod\n    def delta(self) -&gt; np.ndarray:\n        raise NotImplementedError()\n\n    @property\n    @abstractmethod\n    def delta_prime(self) -&gt; np.ndarray:\n        raise NotImplementedError()\n\n    @property\n    @abstractmethod\n    def transformation_matrix(self) -&gt; np.ndarray:\n        raise NotImplementedError()\n\n    def translate(self, template_point: np.ndarray, /) -&gt; np.ndarray:\n        \"\"\"\n        Translates the given template point into a target point. That is, given a position in the template's coordinate system, this function\n        outputs the corresponding position in the target image's coordinate system, according to the affine transformation model.\n        \"\"\"\n        assert template_point.shape == (2,)\n        return self.transformation_matrix @ (template_point - self.delta) + self.delta_prime\n\n    @abstractmethod\n    def get_match_weight(self, match: IMatch, /) -&gt; float:\n        raise NotImplementedError()\n\n    @abstractmethod\n    def interpret_async(self, /, *, target: IImage) -&gt; Future:\n        raise NotImplementedError()\n\n    @abstractmethod\n    def interpret(self, /, **kwargs) -&gt; IInterpretationResult:\n        raise NotImplementedError()\n\n    def get_weighted_mse(self, /) -&gt; float:\n\n        error = 0.0\n        singificant_match_count = 0\n\n        for match in self.matching_result.get_all_matches():\n\n            match_weight = self.get_match_weight(match)\n\n            if match_weight &lt; sys.float_info.epsilon:\n                continue\n\n            singificant_match_count += 1\n\n            s = match.template_point\n\n            # calculate prediction\n            p = self.translate(s)\n\n            # calculate destination\n            d = match.target_point\n\n            current_error = p - d\n            current_error_value = np.dot(current_error, current_error)\n\n            error += current_error_value * match_weight\n\n        return error / singificant_match_count\n\n    def warp_feature(self, feature: IFeature, target: np.ndarray, /) -&gt; np.ndarray:\n\n        target_tl = self.translate(feature.top_left)\n        target_tr = self.translate(feature.top_right)\n        target_bl = self.translate(feature.bottom_left)\n        target_br = self.translate(feature.bottom_right)\n\n        dest_tl = np.array([0, 0], dtype=np.float64)\n        dest_tr = np.array([feature.w, 0], dtype=np.float64)\n        dest_br = np.array([feature.w, feature.h], dtype=np.float64)\n        dest_bl = np.array([0, feature.h], dtype=np.float64)\n\n        source_points = [target_tl, target_tr, target_br, target_bl]\n        destination_points = [dest_tl, dest_tr, dest_br, dest_bl]\n\n        homography = cv2.getPerspectiveTransform(np.float32(source_points), np.float32(destination_points))\n\n        return cv2.warpPerspective(\n            target,\n            np.float32(homography),\n            (feature.w, feature.h),\n            flags=cv2.INTER_LINEAR\n        )\n</code></pre>"},{"location":"api/template/supervision_result/#officialeye._api.template.supervision_result.ISupervisionResult.translate","title":"<code>translate(template_point)</code>","text":"<p>Translates the given template point into a target point. That is, given a position in the template's coordinate system, this function outputs the corresponding position in the target image's coordinate system, according to the affine transformation model.</p> Source code in <code>src/officialeye/_api/template/supervision_result.py</code> <pre><code>def translate(self, template_point: np.ndarray, /) -&gt; np.ndarray:\n    \"\"\"\n    Translates the given template point into a target point. That is, given a position in the template's coordinate system, this function\n    outputs the corresponding position in the target image's coordinate system, according to the affine transformation model.\n    \"\"\"\n    assert template_point.shape == (2,)\n    return self.transformation_matrix @ (template_point - self.delta) + self.delta_prime\n</code></pre>"},{"location":"api/template/supervisor/","title":"Supervisor","text":""},{"location":"api/template/template/","title":"Template","text":""},{"location":"api/template/template/#officialeye._api.template.template.Template","title":"<code>Template</code>","text":"<p>             Bases: <code>ITemplate</code></p> Source code in <code>src/officialeye/_api/template/template.py</code> <pre><code>class Template(ITemplate):\n\n    def __init__(self, context: Context, /, *, path: str):\n        super().__init__()\n\n        self._context = context\n        self._path = path\n\n        # None indicates that the template has not yet been loaded\n        self._external_template: ExternalTemplate | None = None\n\n    def load(self) -&gt; None:\n        \"\"\"\n        Loads the template into memory for further processing.\n\n        If you prefer lazy-evaluation, do not call this method.\n        Instead, run the desired operations with the template, and the necessary resources will be loaded on-the-fly.\n        Use this method only if you really want to preload the template.\n        \"\"\"\n\n        if self._external_template is not None:\n            # the template has already been loaded, nothing to do\n            return\n\n        # noinspection PyProtectedMember\n        future = self._context._submit_task(template_load, \"Loading template...\", self._path)\n\n        self._external_template = future.result()\n\n        assert self._external_template is not None\n        assert isinstance(self._external_template, ExternalTemplate)\n\n    def detect_async(self, /, *, target: IImage) -&gt; Future:\n        self.load()\n        return self._external_template.detect_async(target=target)\n\n    def detect(self, /, **kwargs) -&gt; ISupervisionResult:\n        self.load()\n        return self._external_template.detect(**kwargs)\n\n    def get_image(self) -&gt; IImage:\n        self.load()\n        return self._external_template.get_image()\n\n    def get_mutated_image(self) -&gt; IImage:\n        self.load()\n        return self._external_template.get_mutated_image()\n\n    @property\n    def identifier(self) -&gt; str:\n        self.load()\n        return self._external_template.identifier\n\n    @property\n    def name(self) -&gt; str:\n        self.load()\n        return self._external_template.name\n\n    @property\n    def width(self) -&gt; int:\n        self.load()\n        return self._external_template.width\n\n    @property\n    def height(self) -&gt; int:\n        self.load()\n        return self._external_template.height\n\n    @property\n    def keypoints(self) -&gt; Iterable[IKeypoint]:\n        self.load()\n        return self._external_template.keypoints\n\n    @property\n    def features(self) -&gt; Iterable[IFeature]:\n        self.load()\n        return self._external_template.features\n\n    def get_feature(self, feature_id: str, /) -&gt; IFeature | None:\n        self.load()\n        return self._external_template.get_feature(feature_id)\n\n    def get_keypoint(self, keypoint_id: str, /) -&gt; IKeypoint | None:\n        self.load()\n        return self._external_template.get_keypoint(keypoint_id)\n</code></pre>"},{"location":"api/template/template/#officialeye._api.template.template.Template.load","title":"<code>load()</code>","text":"<p>Loads the template into memory for further processing.</p> <p>If you prefer lazy-evaluation, do not call this method. Instead, run the desired operations with the template, and the necessary resources will be loaded on-the-fly. Use this method only if you really want to preload the template.</p> Source code in <code>src/officialeye/_api/template/template.py</code> <pre><code>def load(self) -&gt; None:\n    \"\"\"\n    Loads the template into memory for further processing.\n\n    If you prefer lazy-evaluation, do not call this method.\n    Instead, run the desired operations with the template, and the necessary resources will be loaded on-the-fly.\n    Use this method only if you really want to preload the template.\n    \"\"\"\n\n    if self._external_template is not None:\n        # the template has already been loaded, nothing to do\n        return\n\n    # noinspection PyProtectedMember\n    future = self._context._submit_task(template_load, \"Loading template...\", self._path)\n\n    self._external_template = future.result()\n\n    assert self._external_template is not None\n    assert isinstance(self._external_template, ExternalTemplate)\n</code></pre>"},{"location":"api/template/template_interface/","title":"Template interface","text":""},{"location":"api/template/template_interface/#officialeye._api.template.template_interface.ITemplate","title":"<code>ITemplate</code>","text":"<p>             Bases: <code>ABC</code></p> Source code in <code>src/officialeye/_api/template/template_interface.py</code> <pre><code>class ITemplate(ABC):\n\n    def __init__(self):\n        super().__init__()\n\n    @abstractmethod\n    def load(self) -&gt; None:\n        \"\"\"\n        Loads the template into memory for further processing.\n\n        If you prefer lazy-evaluation, do not call this method.\n        Instead, run the desired operations with the template, and the necessary resources will be loaded on-the-fly.\n        Use this method only if you really want to preload the template.\n        \"\"\"\n\n        raise NotImplementedError()\n\n    @abstractmethod\n    def detect_async(self, /, *, target: IImage) -&gt; Future:\n        raise NotImplementedError()\n\n    @abstractmethod\n    def detect(self, /, **kwargs) -&gt; ISupervisionResult:\n        raise NotImplementedError()\n\n    @abstractmethod\n    def get_image(self) -&gt; IImage:\n        raise NotImplementedError()\n\n    @abstractmethod\n    def get_mutated_image(self) -&gt; IImage:\n        raise NotImplementedError()\n\n    @property\n    @abstractmethod\n    def identifier(self) -&gt; str:\n        raise NotImplementedError()\n\n    @property\n    @abstractmethod\n    def name(self) -&gt; str:\n        raise NotImplementedError()\n\n    @property\n    @abstractmethod\n    def width(self) -&gt; int:\n        raise NotImplementedError()\n\n    @property\n    @abstractmethod\n    def height(self) -&gt; int:\n        raise NotImplementedError()\n\n    @property\n    @abstractmethod\n    def keypoints(self) -&gt; Iterable[IKeypoint]:\n        raise NotImplementedError()\n\n    @property\n    @abstractmethod\n    def features(self) -&gt; Iterable[IFeature]:\n        raise NotImplementedError()\n\n    @abstractmethod\n    def get_feature(self, feature_id: str, /) -&gt; IFeature | None:\n        raise NotImplementedError()\n\n    @abstractmethod\n    def get_keypoint(self, keypoint_id: str, /) -&gt; IKeypoint | None:\n        raise NotImplementedError()\n\n    def __str__(self) -&gt; str:\n        return f\"Template '{self.identifier}'.\"\n\n    def __eq__(self, o: Any) -&gt; bool:\n\n        if not isinstance(o, ITemplate):\n            return False\n\n        return self.identifier == o.identifier\n\n    def __hash__(self):\n        return hash(self.identifier)\n</code></pre>"},{"location":"api/template/template_interface/#officialeye._api.template.template_interface.ITemplate.load","title":"<code>load()</code>  <code>abstractmethod</code>","text":"<p>Loads the template into memory for further processing.</p> <p>If you prefer lazy-evaluation, do not call this method. Instead, run the desired operations with the template, and the necessary resources will be loaded on-the-fly. Use this method only if you really want to preload the template.</p> Source code in <code>src/officialeye/_api/template/template_interface.py</code> <pre><code>@abstractmethod\ndef load(self) -&gt; None:\n    \"\"\"\n    Loads the template into memory for further processing.\n\n    If you prefer lazy-evaluation, do not call this method.\n    Instead, run the desired operations with the template, and the necessary resources will be loaded on-the-fly.\n    Use this method only if you really want to preload the template.\n    \"\"\"\n\n    raise NotImplementedError()\n</code></pre>"},{"location":"dev/changelog/","title":"Changelog","text":""},{"location":"dev/changelog/#release-122","title":"Release 1.2.2","text":"<ul> <li>Improved the way in which the result of the <code>run</code> and <code>test</code> commands gets outputted, it now also includes the chosen template.</li> <li>Significantly improved performance by implementing a better system for graceful IPC-based interrupting of the thread listening for messages from child processes.</li> </ul> <p>View on GitHub</p>"},{"location":"dev/changelog/#release-121","title":"Release 1.2.1","text":"<ul> <li>Bug fixes &amp; minor improvements.</li> <li>Minor API refinement.</li> </ul> <p>View on GitHub</p>"},{"location":"dev/changelog/#release-120-beta","title":"Release 1.2.0 (beta)","text":""},{"location":"dev/changelog/#major-changes","title":"Major changes","text":"<ul> <li>Implemented the OfficialEye API. Now it is possible to interact with the program programatically, without the need of running the CLI.</li> <li>Reimplemented the CLI as a layer on top of the new API. Thus, the API and the internal implementation no longer contain any code that is specific to the CLI user interface. In particular, it is now easy to implement different frontends that rely on OfficialEye as a backend service.</li> <li>Implemented a framework for transparent and process-safe interaction with the API backend.</li> <li>Switched from thread-based to process-based parallelism for resource-intensive backend operations.</li> <li>Substantially improved the CLI user interface.</li> <li>Numerous other related architecture changes aimed at the long-term stability of the software.</li> <li>Integrated a new error handling system and related debugging facilitibes.</li> <li>Removed the (legacy) orthogonal regression supervision engine.</li> <li>Temporarily disabled the ability to generate visualizations.</li> </ul>"},{"location":"dev/changelog/#minor-changes","title":"Minor changes","text":"<ul> <li>Removed the <code>--worker</code> argument from the <code>run</code> and <code>test</code> commands, because it has become redundant and unnececcary in light of the new architecture.</li> <li>Implemented a new approach to handling image outputting in the CLI, that is much more flexible compared to the previous one.</li> <li>Improved type annotations.</li> <li>Removed the <code>--visualize</code> argument from the <code>test</code> command.</li> </ul> <p>View on GitHub</p>"},{"location":"dev/changelog/#release-115-beta","title":"Release 1.1.5 (beta)","text":"<ul> <li>Added an <code>--interpret</code> option to the <code>run</code> and <code>test</code> commands, allowing one to optionally use a different target image for the interpretation phase.</li> <li>Set up linting and basic unit testing to ensure better code quality.</li> <li>Minor improvements and bug fixes.</li> </ul> <p>View on GitHub</p>"},{"location":"dev/changelog/#release-114-beta","title":"Release 1.1.4 (beta)","text":"<ul> <li>Added a new <code>rotate</code> mutator, that rotates an image by a multiple of 90 degrees.</li> <li>Added a new <code>file</code> interpretation method that is similar to <code>file_temp</code>, but can save a file at the specified path.</li> <li>Improved the error handling system.</li> <li>Fixed multiple bugs, including one critical bug.</li> <li>Added a possibility of using external errors as causes of OfficialEye errors.</li> <li>Added support for non-shape-preserving mutators.</li> <li>Added a new <code>-re</code> flag allowing one to disable built-in error handling.</li> <li>Slightly changed logging style.</li> <li>Refactor.</li> </ul> <p>View on GitHub</p>"},{"location":"dev/changelog/#release-113-beta","title":"Release 1.1.3 (beta)","text":"<ul> <li>The <code>tesseract_ocr</code> interpretation method no longer has default Tesseract OCR configuration values predefined.</li> <li>Added a new <code>file_temp</code> interpretation method that allows one to save features as temporary files.</li> <li>Separated debugging mode and step visualization mode. Now the two settings are independent of each other.</li> <li>Added a new flag <code>--visualize</code> to the <code>run</code> and <code>test</code> commands, allowing users to toggle visualization mode.</li> <li>Simplified the image exporting system.</li> <li>Removed the <code>--dedir</code> global argument. Users should now use <code>--edir</code> instead.</li> <li>Rewritten the context and context management system, making the API much closer to being stable.</li> <li>Other substrantial refactor.</li> <li>Other architecture improvements.</li> <li>Fixed numerous typos and inconsistencies in comments and strings.</li> </ul> <p>View on GitHub</p>"},{"location":"dev/changelog/#release-112-beta","title":"Release 1.1.2 (beta)","text":"<p>There are only minor improvements compared to the previous release (version 1.1.1). This release serves as an initial release for PyPI.</p> <p>View on GitHub</p>"},{"location":"dev/changelog/#release-111-beta","title":"Release 1.1.1 (beta)","text":"<ul> <li>Fixed many minor bugs, typos and inconsistencies.</li> <li>Refactor.</li> <li>Many documentation improvements.</li> </ul> <p>View on GitHub</p>"},{"location":"dev/changelog/#release-110-beta","title":"Release 1.1.0 (beta)","text":"<p>This release features a new mutation and interpretation system, and a feature class system.</p> <ul> <li>Huge refactor of the entire codebase, and numerous architecture improvements.</li> <li>Removed the <code>officialeye analyze</code> command, replacing its functionality with <code>officialeye test</code> and <code>officialeye run</code>.</li> <li>Simplified the implementation of IO Drivers, and removed the possibility of manually speficying the desired IO driver via the <code>--io</code> option, as it is no longer required.</li> <li>Implemented the feature class system that allows grouping of features together in a non-verbose and meaningful way, and which, among other features, supports abstraction and inheritance.</li> <li>Removed the possibility of attaching meta values to features, as this has been a bad design choice.</li> <li>Implemented the feature interpretation system, allowing one to specify for every feature the way in which it is to be intepreted.</li> <li>Implemented the mutation system and the ability of adding mutators to feature classes that get applied before executing the interpretation system.</li> <li>The score value is now included in the output of the <code>officialeye run</code> command. This value represents the level of confidence in the correctness of the result.</li> <li>Fixed incorrect behavior when a template keypoint required matches, but there were actually no matches whatsoever.</li> <li>Added <code>--show-features</code> options to the <code>officialeye test</code> command, that allows one to specify whether the feature borders are to be visualized or not.</li> <li>Added <code>--hide-features</code> and <code>--hide-keypoints</code> options to the <code>officialeye show</code> command.</li> <li>Added the possibility of applying mutators to the template image and to the target images.</li> <li>Added grayscaling, denoising, and contrast increasing mutators.</li> </ul> <p>View on GitHub</p>"},{"location":"dev/changelog/#pre-release-102-beta","title":"Pre-Release 1.0.2 (beta)","text":"<p>This pre-release features automatic template config generation, engine-specific configurations, performance improvements, and more!</p> <ul> <li>Automatic template configuration file generation via the <code>officialeye create</code> command (see #2).</li> <li>Improved logging.</li> <li>Minor bug fixes.</li> <li>Improved the <code>officialeye show</code> command, improved in particular the overlay look.</li> <li>The matching system now supports engine-specific configuration. For example, if you are using the <code>sift_flann</code> keypoint matcher, you can now specify the <code>sensitivity</code> value in the <code>matching.config.sift_flann.sensitivity</code> option of the template configuration file.</li> <li>Improved error handling.</li> <li>Significantly improved the performance of the <code>sift_flann</code> keypoint matching engine.</li> <li>Template features can now have fully customizable meta-information attached to them. This allows more flexibility for concrete supervision engine implementations.</li> </ul> <p>View on GitHub</p>"},{"location":"dev/changelog/#pre-release-101-beta","title":"Pre-Release 1.0.1 (beta)","text":"<p>This pre-release features new and improved Supervision Engines, Error Handling, IO Drivers, OCR Support, and more.</p> <ul> <li>Implemented three supervision engines - <code>combinatorial</code>, <code>least_squares_regression</code>, and <code>orthogonal_regression</code>. The combinatorial supervision engine used to rely on Cylindrical Algebraic Decomposition; now it relies on the z3 <code>QF_LRA</code> optimization engine.</li> <li>The supervision engines are now completely separated from the matching engines: Thus, they can be combined in any way.</li> <li>Added support for analyzing an image against multiple templates: the result with the highest score gets chosen as the final result at the end: the scoring system is completely customizable via a flexible API</li> <li>New logging system with colored messages.</li> <li>Completely rewritten the error handling system\u2014now it is based on python exceptions and is much more reliable and less error-prone.</li> <li>Abstracted out the handling of input/output. Now it is possible to easily integrate any custom handling of the system's output, by implementing an IO driver system.</li> <li>Added a new tesseract-based OCR IO Driver.</li> </ul> <p>View on GitHub</p>"},{"location":"dev/changelog/#pre-release-100-beta","title":"Pre-Release 1.0.0 (beta)","text":"<p>View on GitHub</p>"},{"location":"dev/api/","title":"Index","text":"<p>Module containing the OfficialEye internal API.</p> <p>WARNING! Do not import it unless you know precisely what you are doing. Instead, use the public API to interact with OfficialEye programatically.</p>"},{"location":"dev/api/_types/","title":"types","text":""},{"location":"dev/api/api_implementation/","title":"Api implementation","text":""},{"location":"dev/api/api_implementation/#officialeye._internal.api_implementation.IApiInterfaceImplementation","title":"<code>IApiInterfaceImplementation</code>","text":"<p>             Bases: <code>ABC</code></p> Source code in <code>src/officialeye/_internal/api_implementation.py</code> <pre><code>class IApiInterfaceImplementation(ABC):\n\n    @abstractmethod\n    def set_api_context(self, context: Context, /) -&gt; None:\n        \"\"\"\n        This method should be used to propagate the public API's context to the objects returned by the internal implementation of the API.\n        Those objects are called 'external' and should be picklable if the API context has not yet been set via this method.\n        If it was, then all methods guaranteed by the corresponding object's public API interface can be implemented properly.\n        \"\"\"\n        raise NotImplementedError()\n\n    @abstractmethod\n    def clear_api_context(self) -&gt; None:\n        \"\"\"\n        This method should clear the public API's context stored in the current object, and in all internal objects implementing this interface.\n        It is essential that after running this method, the object is picklable.\n        \"\"\"\n        raise NotImplementedError()\n</code></pre>"},{"location":"dev/api/api_implementation/#officialeye._internal.api_implementation.IApiInterfaceImplementation.clear_api_context","title":"<code>clear_api_context()</code>  <code>abstractmethod</code>","text":"<p>This method should clear the public API's context stored in the current object, and in all internal objects implementing this interface. It is essential that after running this method, the object is picklable.</p> Source code in <code>src/officialeye/_internal/api_implementation.py</code> <pre><code>@abstractmethod\ndef clear_api_context(self) -&gt; None:\n    \"\"\"\n    This method should clear the public API's context stored in the current object, and in all internal objects implementing this interface.\n    It is essential that after running this method, the object is picklable.\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"dev/api/api_implementation/#officialeye._internal.api_implementation.IApiInterfaceImplementation.set_api_context","title":"<code>set_api_context(context)</code>  <code>abstractmethod</code>","text":"<p>This method should be used to propagate the public API's context to the objects returned by the internal implementation of the API. Those objects are called 'external' and should be picklable if the API context has not yet been set via this method. If it was, then all methods guaranteed by the corresponding object's public API interface can be implemented properly.</p> Source code in <code>src/officialeye/_internal/api_implementation.py</code> <pre><code>@abstractmethod\ndef set_api_context(self, context: Context, /) -&gt; None:\n    \"\"\"\n    This method should be used to propagate the public API's context to the objects returned by the internal implementation of the API.\n    Those objects are called 'external' and should be picklable if the API context has not yet been set via this method.\n    If it was, then all methods guaranteed by the corresponding object's public API interface can be implemented properly.\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"dev/api/timer/","title":"Timer","text":""},{"location":"dev/api/api/","title":"Index","text":"<p>This module provides a set of functions connecting the API interface with the internal implementation interface. In other words, the functions of this module form a low-level API that should be called internally in the actual public API.</p>"},{"location":"dev/api/api/detect/","title":"Detect","text":""},{"location":"dev/api/api/interpret/","title":"Interpret","text":""},{"location":"dev/api/api/load/","title":"Load","text":""},{"location":"dev/api/context/","title":"Index","text":"<p>Module responsible for managing OfficialEye's global state.</p>"},{"location":"dev/api/context/context/","title":"Context","text":""},{"location":"dev/api/context/feedback/","title":"Feedback","text":""},{"location":"dev/api/context/singleton/","title":"Singleton","text":""},{"location":"dev/api/diffobject/","title":"Index","text":"<p>A difference object is either a dictionary conforming to some schema, or a dictionary-like representation of how to change another dictionary. This module contains everything related to difference objects.</p>"},{"location":"dev/api/diffobject/difference_expansion/","title":"Difference expansion","text":""},{"location":"dev/api/diffobject/difference_expansion/#officialeye._internal.diffobject.difference_expansion.DiffObjectExpansion","title":"<code>DiffObjectExpansion</code>","text":"<p>This class maintains a state capturing the information gathered by applying partial objects of the same type in sequence. That is, this class allows you to build a complete specification-compliant object out of a sequence of partial objects, by applying the difference specifications contained in the partial objects appropriately.</p> Source code in <code>src/officialeye/_internal/diffobject/difference_expansion.py</code> <pre><code>class DiffObjectExpansion:\n    \"\"\"\n    This class maintains a state capturing the information gathered by applying partial objects of the same type in sequence.\n    That is, this class allows you to build a complete specification-compliant object out of a sequence of partial objects,\n    by applying the difference specifications contained in the partial objects appropriately.\n    \"\"\"\n\n    def __init__(self, spec: DiffObjectSpecification, /):\n        self._spec = spec\n        self._cur_object = {}\n\n    def add(self, partial_object: Dict[str, any], /):\n        \"\"\"\n        Changes the current object by using the information from the given object.\n\n        Arguments:\n            partial_object: Which object to get the information from.\n\n        Raises:\n            DiffObjectException: In the event of a merge error.\n        \"\"\"\n\n        def _do_add(specification_dict: Dict[str, any],\n                    current_dict: Dict[str, any],\n                    object_dict: Dict[str, any], /, *, previous_keys: str = \"\"):\n            \"\"\"\n            Arguments:\n                specification_dict: Current subdictionary of the specification represented as a dictionary\n                current_dict: Corresponding subdictionary of `self._cur_object`\n                object_dict: Corresponding subdictionary of `partial_object`\n            \"\"\"\n\n            assert isinstance(specification_dict, dict)\n            assert isinstance(current_dict, dict)\n            assert isinstance(object_dict, dict)\n\n            for key in specification_dict:\n\n                if key not in object_dict:\n                    # the current key is not present in the partial object at all\n                    # hence, there is nothing to do\n                    continue\n\n                specification_entry = specification_dict[key]\n                current_value = current_dict.get(key)  # corresponding value in `self._cur_object`\n                object_value = object_dict[key]  # corresponding value in `partial_object`\n                object_value_diff_mode = object_dict.get(f\"${key}\", None)\n\n                full_key = f\"{previous_keys}{key}\"\n\n                get_internal_afi().info(\n                    Verbosity.DEBUG_VERBOSE,\n                    f\"Key: '{full_key}' Specification value: {specification_entry} \"\n                    f\"Object value: {object_value} Current value: {current_value}\"\n                )\n\n                if isinstance(specification_entry, dict):\n                    # the specification says that there is a nested dictionary at the present key.\n                    # therefore, we need to recursively apply the diffs\n                    if current_value is not None:\n                        new_current_dict = current_value\n                    else:\n                        new_current_dict = {}\n                        current_dict[key] = new_current_dict\n\n                    _do_add(specification_entry, new_current_dict, object_value, previous_keys=f\"{previous_keys}{key}.\")\n                    continue\n\n                # handle non-recursive cases\n                assert isinstance(specification_entry, DiffObjectSpecificationEntry)\n\n                # test whether the partial object contains an entry explicitly specifying a difference node\n                if object_value_diff_mode is not None:\n                    if object_value_diff_mode not in (\n                        DIFF_MODE_OVERRIDE,\n                        DIFF_MODE_ADD,\n                        DIFF_MODE_REMOVE\n                    ):\n                        raise DiffObjectException(f\"Unknown difference mode specification '{object_value_diff_mode}' for key '{full_key}'.\")\n                    diff_mode = object_value_diff_mode\n                else:\n                    # default difference mode\n                    diff_mode = DIFF_MODE_OVERRIDE\n\n                current_dict[key] = specification_entry.apply_diff(current_value, object_value, diff_mode)\n\n        _do_add(\n            self._spec.get_spec_as_dict(),\n            self._cur_object,\n            partial_object\n        )\n\n    def get_current_partial_object(self) -&gt; Dict[str, any]:\n        return self._cur_object.copy()\n\n    def get_full_object(self) -&gt; Dict[str, any]:\n        \"\"\"\n        Retrieves the full object with all the differences applied.\n\n        Raises:\n            DiffObjectException: If there is not enough information to build the entire object (i.e., not all keys are present).\n        \"\"\"\n\n        def _verify_object_completeness(cur_obj_dict: Dict[str, any], spec_dict: Dict[str, any], /, *, previous_keys: str = \"\"):\n\n            for key in spec_dict:\n                spec_entry = spec_dict[key]\n\n                full_key = f\"{previous_keys}{key}\"\n\n                if key not in cur_obj_dict:\n                    raise DiffObjectException(f\"Could not resolve value for key '{full_key}'.\")\n\n                cur_obj_value = cur_obj_dict[key]\n\n                if isinstance(spec_entry, dict):\n                    # completeness should be checked recursively\n                    assert isinstance(cur_obj_value, dict)\n                    _verify_object_completeness(cur_obj_value, spec_entry, previous_keys=f\"{previous_keys}{key}.\")\n                    continue\n\n                assert isinstance(spec_entry, DiffObjectSpecificationEntry)\n\n        _verify_object_completeness(self._cur_object, self._spec.get_spec_as_dict())\n\n        return self._cur_object.copy()\n</code></pre>"},{"location":"dev/api/diffobject/difference_expansion/#officialeye._internal.diffobject.difference_expansion.DiffObjectExpansion.add","title":"<code>add(partial_object)</code>","text":"<p>Changes the current object by using the information from the given object.</p> <p>Parameters:</p> Name Type Description Default <code>partial_object</code> <code>Dict[str, any]</code> <p>Which object to get the information from.</p> required <p>Raises:</p> Type Description <code>DiffObjectException</code> <p>In the event of a merge error.</p> Source code in <code>src/officialeye/_internal/diffobject/difference_expansion.py</code> <pre><code>def add(self, partial_object: Dict[str, any], /):\n    \"\"\"\n    Changes the current object by using the information from the given object.\n\n    Arguments:\n        partial_object: Which object to get the information from.\n\n    Raises:\n        DiffObjectException: In the event of a merge error.\n    \"\"\"\n\n    def _do_add(specification_dict: Dict[str, any],\n                current_dict: Dict[str, any],\n                object_dict: Dict[str, any], /, *, previous_keys: str = \"\"):\n        \"\"\"\n        Arguments:\n            specification_dict: Current subdictionary of the specification represented as a dictionary\n            current_dict: Corresponding subdictionary of `self._cur_object`\n            object_dict: Corresponding subdictionary of `partial_object`\n        \"\"\"\n\n        assert isinstance(specification_dict, dict)\n        assert isinstance(current_dict, dict)\n        assert isinstance(object_dict, dict)\n\n        for key in specification_dict:\n\n            if key not in object_dict:\n                # the current key is not present in the partial object at all\n                # hence, there is nothing to do\n                continue\n\n            specification_entry = specification_dict[key]\n            current_value = current_dict.get(key)  # corresponding value in `self._cur_object`\n            object_value = object_dict[key]  # corresponding value in `partial_object`\n            object_value_diff_mode = object_dict.get(f\"${key}\", None)\n\n            full_key = f\"{previous_keys}{key}\"\n\n            get_internal_afi().info(\n                Verbosity.DEBUG_VERBOSE,\n                f\"Key: '{full_key}' Specification value: {specification_entry} \"\n                f\"Object value: {object_value} Current value: {current_value}\"\n            )\n\n            if isinstance(specification_entry, dict):\n                # the specification says that there is a nested dictionary at the present key.\n                # therefore, we need to recursively apply the diffs\n                if current_value is not None:\n                    new_current_dict = current_value\n                else:\n                    new_current_dict = {}\n                    current_dict[key] = new_current_dict\n\n                _do_add(specification_entry, new_current_dict, object_value, previous_keys=f\"{previous_keys}{key}.\")\n                continue\n\n            # handle non-recursive cases\n            assert isinstance(specification_entry, DiffObjectSpecificationEntry)\n\n            # test whether the partial object contains an entry explicitly specifying a difference node\n            if object_value_diff_mode is not None:\n                if object_value_diff_mode not in (\n                    DIFF_MODE_OVERRIDE,\n                    DIFF_MODE_ADD,\n                    DIFF_MODE_REMOVE\n                ):\n                    raise DiffObjectException(f\"Unknown difference mode specification '{object_value_diff_mode}' for key '{full_key}'.\")\n                diff_mode = object_value_diff_mode\n            else:\n                # default difference mode\n                diff_mode = DIFF_MODE_OVERRIDE\n\n            current_dict[key] = specification_entry.apply_diff(current_value, object_value, diff_mode)\n\n    _do_add(\n        self._spec.get_spec_as_dict(),\n        self._cur_object,\n        partial_object\n    )\n</code></pre>"},{"location":"dev/api/diffobject/difference_expansion/#officialeye._internal.diffobject.difference_expansion.DiffObjectExpansion.get_full_object","title":"<code>get_full_object()</code>","text":"<p>Retrieves the full object with all the differences applied.</p> <p>Raises:</p> Type Description <code>DiffObjectException</code> <p>If there is not enough information to build the entire object (i.e., not all keys are present).</p> Source code in <code>src/officialeye/_internal/diffobject/difference_expansion.py</code> <pre><code>def get_full_object(self) -&gt; Dict[str, any]:\n    \"\"\"\n    Retrieves the full object with all the differences applied.\n\n    Raises:\n        DiffObjectException: If there is not enough information to build the entire object (i.e., not all keys are present).\n    \"\"\"\n\n    def _verify_object_completeness(cur_obj_dict: Dict[str, any], spec_dict: Dict[str, any], /, *, previous_keys: str = \"\"):\n\n        for key in spec_dict:\n            spec_entry = spec_dict[key]\n\n            full_key = f\"{previous_keys}{key}\"\n\n            if key not in cur_obj_dict:\n                raise DiffObjectException(f\"Could not resolve value for key '{full_key}'.\")\n\n            cur_obj_value = cur_obj_dict[key]\n\n            if isinstance(spec_entry, dict):\n                # completeness should be checked recursively\n                assert isinstance(cur_obj_value, dict)\n                _verify_object_completeness(cur_obj_value, spec_entry, previous_keys=f\"{previous_keys}{key}.\")\n                continue\n\n            assert isinstance(spec_entry, DiffObjectSpecificationEntry)\n\n    _verify_object_completeness(self._cur_object, self._spec.get_spec_as_dict())\n\n    return self._cur_object.copy()\n</code></pre>"},{"location":"dev/api/diffobject/difference_modes/","title":"Difference modes","text":""},{"location":"dev/api/diffobject/exception/","title":"Exception","text":""},{"location":"dev/api/diffobject/exception/#officialeye._internal.diffobject.exception.DiffObjectException","title":"<code>DiffObjectException</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Base class for all <code>diffobject</code> exceptions.</p> Source code in <code>src/officialeye/_internal/diffobject/exception.py</code> <pre><code>class DiffObjectException(Exception):\n    \"\"\"\n    Base class for all `diffobject` exceptions.\n    \"\"\"\n\n    def __init__(self, problem: str, /):\n        super().__init__()\n\n        self.problem = problem\n\n    def __str__(self):\n        return self.problem\n</code></pre>"},{"location":"dev/api/diffobject/specification/","title":"Specification","text":""},{"location":"dev/api/diffobject/specification/#officialeye._internal.diffobject.specification.DiffObjectSpecification","title":"<code>DiffObjectSpecification</code>","text":"<p>Class representing a complete specification of an object that supports partial definitions and difference application.</p> Source code in <code>src/officialeye/_internal/diffobject/specification.py</code> <pre><code>class DiffObjectSpecification:\n    \"\"\"\n    Class representing a complete specification of an object that supports partial definitions and difference application.\n    \"\"\"\n\n    def __init__(self, specification: Dict[str, any], /, *, validate_specification: bool = True):\n        self._spec = specification\n        if validate_specification:\n            self._validate_spec()\n\n    def get_spec_as_dict(self) -&gt; Dict[str, any]:\n        return self._spec\n\n    def _validate_spec(self, /):\n\n        def _validator(entry_point: Dict[str, any], /):\n            for key in entry_point:\n                assert isinstance(key, str)\n\n                value = entry_point[key]\n\n                if isinstance(value, DiffObjectSpecificationEntry):\n                    continue\n\n                if isinstance(value, dict):\n                    _validator(value)\n                    continue\n\n                raise AssertionError()\n\n        _validator(self._spec)\n\n    def get_schema(self) -&gt; yml.Validator:\n\n        def _mapper(entry_point: Dict[str, any], /) -&gt; yml.Validator:\n\n            mapped_dict = {}\n            assert isinstance(entry_point, dict)\n\n            for key in entry_point:\n                assert isinstance(key, str)\n                value = entry_point[key]\n\n                if isinstance(value, DiffObjectSpecificationEntry):\n\n                    # the value might be provided explicitly\n                    mapped_dict[yml.Optional(key)] = value.get_schema()\n\n                    # or it can be obtained from a previous value by applying a difference strategy\n                    mapped_dict[yml.Optional(\"$\" + key)] = yml.Str()\n\n                    continue\n\n                if isinstance(value, dict):\n                    mapped_dict[yml.Optional(key)] = _mapper(value)\n                    continue\n\n                raise AssertionError()\n\n            return yml.Map(mapped_dict)\n\n        return _mapper(self._spec)\n</code></pre>"},{"location":"dev/api/diffobject/specification_entry/","title":"Specification entry","text":""},{"location":"dev/api/diffobject/specification_entry/#officialeye._internal.diffobject.specification_entry.DiffObjectSpecificationEntry","title":"<code>DiffObjectSpecificationEntry</code>","text":"<p>             Bases: <code>ABC</code></p> Source code in <code>src/officialeye/_internal/diffobject/specification_entry.py</code> <pre><code>class DiffObjectSpecificationEntry(ABC):\n\n    def __init__(self, validator: yml.Validator, /):\n        self._validator = validator\n\n    def get_schema(self) -&gt; yml.Validator:\n        \"\"\" Retrieves a schema for the current specification entry. \"\"\"\n        return self._validator\n\n    @abc.abstractmethod\n    def apply_diff(self, current_value: any, diff_value: any, diff_mode: str) -&gt; any:\n        \"\"\"\n        Calculates a new value for an entry, based on currently available value, some provided value, and a way of combining them.\n\n        Arguments:\n            current_value: The current value assigned to the entry, or None if there is no such value.\n            diff_value: A new value provided for this entry.\n            diff_mode: How the two values are to be combined to form a new value.\n\n        Returns:\n            The new value obtained by combining current_value with diff_value using diff_mode.\n\n        Raises:\n            DiffObjectException: If the difference mode cannot be applied to the present entry, for example, due to its type.\n        \"\"\"\n        raise NotImplementedError()\n</code></pre>"},{"location":"dev/api/diffobject/specification_entry/#officialeye._internal.diffobject.specification_entry.DiffObjectSpecificationEntry.apply_diff","title":"<code>apply_diff(current_value, diff_value, diff_mode)</code>  <code>abstractmethod</code>","text":"<p>Calculates a new value for an entry, based on currently available value, some provided value, and a way of combining them.</p> <p>Parameters:</p> Name Type Description Default <code>current_value</code> <code>any</code> <p>The current value assigned to the entry, or None if there is no such value.</p> required <code>diff_value</code> <code>any</code> <p>A new value provided for this entry.</p> required <code>diff_mode</code> <code>str</code> <p>How the two values are to be combined to form a new value.</p> required <p>Returns:</p> Type Description <code>any</code> <p>The new value obtained by combining current_value with diff_value using diff_mode.</p> <p>Raises:</p> Type Description <code>DiffObjectException</code> <p>If the difference mode cannot be applied to the present entry, for example, due to its type.</p> Source code in <code>src/officialeye/_internal/diffobject/specification_entry.py</code> <pre><code>@abc.abstractmethod\ndef apply_diff(self, current_value: any, diff_value: any, diff_mode: str) -&gt; any:\n    \"\"\"\n    Calculates a new value for an entry, based on currently available value, some provided value, and a way of combining them.\n\n    Arguments:\n        current_value: The current value assigned to the entry, or None if there is no such value.\n        diff_value: A new value provided for this entry.\n        diff_mode: How the two values are to be combined to form a new value.\n\n    Returns:\n        The new value obtained by combining current_value with diff_value using diff_mode.\n\n    Raises:\n        DiffObjectException: If the difference mode cannot be applied to the present entry, for example, due to its type.\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"dev/api/diffobject/specification_entry/#officialeye._internal.diffobject.specification_entry.DiffObjectSpecificationEntry.get_schema","title":"<code>get_schema()</code>","text":"<p>Retrieves a schema for the current specification entry.</p> Source code in <code>src/officialeye/_internal/diffobject/specification_entry.py</code> <pre><code>def get_schema(self) -&gt; yml.Validator:\n    \"\"\" Retrieves a schema for the current specification entry. \"\"\"\n    return self._validator\n</code></pre>"},{"location":"dev/api/diffobject/specification_entries/","title":"Index","text":"<p>A collection of all classes extending DiffObjectSpecificationEntry.</p>"},{"location":"dev/api/diffobject/specification_entries/boolean/","title":"Boolean","text":""},{"location":"dev/api/diffobject/specification_entries/float/","title":"Float","text":""},{"location":"dev/api/diffobject/specification_entries/integer/","title":"Integer","text":""},{"location":"dev/api/diffobject/specification_entries/list/","title":"List","text":""},{"location":"dev/api/diffobject/specification_entries/object/","title":"Object","text":""},{"location":"dev/api/diffobject/specification_entries/string/","title":"String","text":""},{"location":"dev/api/feedback/","title":"Index","text":""},{"location":"dev/api/feedback/abstract/","title":"Abstract","text":""},{"location":"dev/api/feedback/dummy/","title":"Dummy","text":""},{"location":"dev/api/feedback/verbosity/","title":"Verbosity","text":""},{"location":"dev/api/supervision/","title":"Index","text":"<p>Module containing everything related to supervision.</p>"},{"location":"dev/api/supervision/visualizer/","title":"Visualizer","text":""},{"location":"dev/api/template/","title":"Index","text":"<p>Module implementing the template system.</p>"},{"location":"dev/api/template/external_feature/","title":"External feature","text":""},{"location":"dev/api/template/external_interpretation_result/","title":"External interpretation result","text":""},{"location":"dev/api/template/external_matching_result/","title":"External matching result","text":""},{"location":"dev/api/template/external_matching_result/#officialeye._internal.template.external_matching_result.ExternalMatchingResult","title":"<code>ExternalMatchingResult</code>","text":"<p>             Bases: <code>SharedMatchingResult</code>, <code>IApiInterfaceImplementation</code></p> <p>Representation of the matching result, designed to be used by the main process. For this reason, it is essential that this class is picklable.</p> Source code in <code>src/officialeye/_internal/template/external_matching_result.py</code> <pre><code>class ExternalMatchingResult(SharedMatchingResult, IApiInterfaceImplementation):\n    \"\"\"\n    Representation of the matching result, designed to be used by the main process.\n    For this reason, it is essential that this class is picklable.\n    \"\"\"\n\n    def __init__(self, internal_matching_result: InternalMatchingResult, external_template: ExternalTemplate, /):\n        super().__init__(internal_matching_result.template)\n\n        self._template = external_template\n\n    @property\n    def template(self) -&gt; ExternalTemplate:\n        return self._template\n\n    def set_api_context(self, context: Context, /) -&gt; None:\n        self._template.set_api_context(context)\n\n    def clear_api_context(self) -&gt; None:\n        self._template.clear_api_context()\n</code></pre>"},{"location":"dev/api/template/external_supervision_result/","title":"External supervision result","text":""},{"location":"dev/api/template/external_template/","title":"External template","text":""},{"location":"dev/api/template/external_template/#officialeye._internal.template.external_template.ExternalTemplate","title":"<code>ExternalTemplate</code>","text":"<p>             Bases: <code>ITemplate</code>, <code>IApiInterfaceImplementation</code></p> <p>Representation of a template instance designed to be shared between processes. It is very important that this class is picklable!</p> Source code in <code>src/officialeye/_internal/template/external_template.py</code> <pre><code>class ExternalTemplate(ITemplate, IApiInterfaceImplementation):\n    \"\"\"\n    Representation of a template instance designed to be shared between processes.\n    It is very important that this class is picklable!\n    \"\"\"\n\n    def __init__(self, template: InternalTemplate, /):\n        super().__init__()\n\n        self._context: Context | None = None\n\n        self._identifier: str = template.identifier\n        self._name: str = template.name\n        self._path: str = template.get_path()\n        self._source_image_path: str = template.get_source_image_path()\n\n        self._width = template.width\n        self._height = template.height\n\n        self._keypoints: Dict[str, ExternalKeypoint] = {}\n        self._features: Dict[str, ExternalFeature] = {}\n\n        for keypoint in template.keypoints:\n            self._keypoints[keypoint.identifier] = ExternalKeypoint(keypoint, self)\n\n        for feature in template.features:\n            self._features[feature.identifier] = ExternalFeature(feature, self)\n\n        self._source_mutators: List[IMutator] = [\n            mutator for mutator in template.get_source_mutators()\n        ]\n\n        self._target_mutators: List[IMutator] = [\n            mutator for mutator in template.get_target_mutators()\n        ]\n\n    def set_api_context(self, context: Context, /) -&gt; None:\n        self._context = context\n\n        for external_keypoint in self.keypoints:\n            external_keypoint.set_api_context(context)\n\n        for external_feature in self.features:\n            external_feature.set_api_context(context)\n\n    def clear_api_context(self) -&gt; None:\n        self._context = None\n\n        for external_keypoint in self.keypoints:\n            external_keypoint.clear_api_context()\n\n        for external_feature in self.features:\n            external_feature.clear_api_context()\n\n    def load(self) -&gt; None:\n        raise ErrOperationNotSupported(\n            \"while accessing an external template instance.\",\n            \"The way in which it was accessed is not supported.\"\n        )\n\n    def detect_async(self, /, *, target: IImage) -&gt; Future:\n\n        # TODO: this is hacky, maybe use a more clean approach here?\n        assert isinstance(target, Image)\n\n        # noinspection PyProtectedMember\n        return self._context._submit_task(\n            template_detect,\n            f\"Detecting [b]{self._name}[/]...\",\n            self._path,\n            target_path=target._path,\n        )\n\n    def detect(self, /, **kwargs) -&gt; ISupervisionResult:\n        future = self.detect_async(**kwargs)\n        return future.result()\n\n    def get_image(self) -&gt; IImage:\n        return Image(self._context, path=self._source_image_path)\n\n    def get_mutated_image(self) -&gt; IImage:\n        img = self.get_image()\n        img.apply_mutators(*self._source_mutators)\n        return img\n\n    @property\n    def identifier(self) -&gt; str:\n        return self._identifier\n\n    @property\n    def name(self) -&gt; str:\n        return self._name\n\n    @property\n    def width(self) -&gt; int:\n        return self._width\n\n    @property\n    def height(self) -&gt; int:\n        return self._height\n\n    @property\n    def keypoints(self) -&gt; Iterable[ExternalKeypoint]:\n        return self._keypoints.values()\n\n    @property\n    def features(self) -&gt; Iterable[ExternalFeature]:\n        return self._features.values()\n\n    def get_feature(self, feature_id: str, /) -&gt; ExternalFeature | None:\n        if feature_id not in self._features:\n            return None\n        return self._features[feature_id]\n\n    def get_keypoint(self, keypoint_id: str, /) -&gt; ExternalKeypoint | None:\n        if keypoint_id not in self._keypoints:\n            return None\n        return self._keypoints[keypoint_id]\n</code></pre>"},{"location":"dev/api/template/image/","title":"Image","text":""},{"location":"dev/api/template/internal_feature/","title":"Internal feature","text":""},{"location":"dev/api/template/internal_feature/#officialeye._internal.template.internal_feature.InternalFeature","title":"<code>InternalFeature</code>","text":"<p>             Bases: <code>InternalRegion</code>, <code>IFeature</code></p> Source code in <code>src/officialeye/_internal/template/internal_feature.py</code> <pre><code>class InternalFeature(InternalRegion, IFeature):\n\n    def __init__(self, template_id: str, feature_dict: Dict[str, any], /):\n        super().__init__(template_id, feature_dict)\n\n        if \"class\" in feature_dict:\n            self._class_id = feature_dict[\"class\"]\n            assert isinstance(self._class_id, str)\n        else:\n            self._class_id = None\n\n    def validate_feature_class(self):\n\n        if self._class_id is None:\n            return\n\n        feature_classes: FeatureClassManager = self.template.get_feature_classes()\n\n        if not feature_classes.contains_class(self._class_id):\n            raise ErrTemplateInvalidFeature(\n                f\"while loading class for feature '{self.identifier}' in template '{self.template.identifier}'.\",\n                f\"Specified feature class '{self._class_id}' is not defined.\"\n            )\n\n        feature_class = feature_classes.get_class(self._class_id)\n\n        if feature_class.is_abstract():\n            raise ErrTemplateInvalidFeature(\n                f\"while loading class for feature '{self.identifier}' in template '{self.template.identifier}'.\",\n                f\"Cannot instantiate an abstract feature class '{self._class_id}'.\"\n            )\n\n    def get_feature_class(self) -&gt; Union[FeatureClass, None]:\n        \"\"\" Returns class of feature, or None if the feature does not have a class. \"\"\"\n\n        if self._class_id is None:\n            return None\n\n        feature_classes: FeatureClassManager = self.template.get_feature_classes()\n\n        assert feature_classes.contains_class(self._class_id)\n\n        feature_class = feature_classes.get_class(self._class_id)\n\n        assert not feature_class.is_abstract()\n\n        return feature_class\n\n    def get_mutators(self) -&gt; Iterable[IMutator]:\n\n        feature_class = self.get_feature_class()\n\n        if feature_class is None:\n            return []\n\n        mutators = feature_class.get_data()[\"mutators\"]\n\n        assert isinstance(mutators, list)\n\n        return [\n            load_mutator_from_dict(mutator_dict) for mutator_dict in mutators\n        ]\n\n    def interpret_image(self, img: np.ndarray, /) -&gt; FeatureInterpretation:\n        \"\"\"\n        Takes an image and runs the interpretation method defined in the corresponding feature class.\n        Assumes that the feature class is present.\n\n        Arguments:\n            img: The image which should be passed to the intepretation method.\n\n        Returns:\n            The result of running the interpretation method on the image.\n        \"\"\"\n\n        feature_class = self.get_feature_class()\n\n        assert feature_class is not None\n\n        interpretation_method_id = feature_class.get_data()[\"interpretation\"][\"method\"]\n        interpretation_method_config = feature_class.get_data()[\"interpretation\"][\"config\"]\n\n        assert isinstance(interpretation_method_id, str)\n        assert isinstance(interpretation_method_config, dict)\n\n        interpretation_method = get_internal_context().get_interpretation(interpretation_method_id, interpretation_method_config)\n\n        return interpretation_method.interpret(img, self)\n</code></pre>"},{"location":"dev/api/template/internal_feature/#officialeye._internal.template.internal_feature.InternalFeature.get_feature_class","title":"<code>get_feature_class()</code>","text":"<p>Returns class of feature, or None if the feature does not have a class.</p> Source code in <code>src/officialeye/_internal/template/internal_feature.py</code> <pre><code>def get_feature_class(self) -&gt; Union[FeatureClass, None]:\n    \"\"\" Returns class of feature, or None if the feature does not have a class. \"\"\"\n\n    if self._class_id is None:\n        return None\n\n    feature_classes: FeatureClassManager = self.template.get_feature_classes()\n\n    assert feature_classes.contains_class(self._class_id)\n\n    feature_class = feature_classes.get_class(self._class_id)\n\n    assert not feature_class.is_abstract()\n\n    return feature_class\n</code></pre>"},{"location":"dev/api/template/internal_feature/#officialeye._internal.template.internal_feature.InternalFeature.interpret_image","title":"<code>interpret_image(img)</code>","text":"<p>Takes an image and runs the interpretation method defined in the corresponding feature class. Assumes that the feature class is present.</p> <p>Parameters:</p> Name Type Description Default <code>img</code> <code>ndarray</code> <p>The image which should be passed to the intepretation method.</p> required <p>Returns:</p> Type Description <code>FeatureInterpretation</code> <p>The result of running the interpretation method on the image.</p> Source code in <code>src/officialeye/_internal/template/internal_feature.py</code> <pre><code>def interpret_image(self, img: np.ndarray, /) -&gt; FeatureInterpretation:\n    \"\"\"\n    Takes an image and runs the interpretation method defined in the corresponding feature class.\n    Assumes that the feature class is present.\n\n    Arguments:\n        img: The image which should be passed to the intepretation method.\n\n    Returns:\n        The result of running the interpretation method on the image.\n    \"\"\"\n\n    feature_class = self.get_feature_class()\n\n    assert feature_class is not None\n\n    interpretation_method_id = feature_class.get_data()[\"interpretation\"][\"method\"]\n    interpretation_method_config = feature_class.get_data()[\"interpretation\"][\"config\"]\n\n    assert isinstance(interpretation_method_id, str)\n    assert isinstance(interpretation_method_config, dict)\n\n    interpretation_method = get_internal_context().get_interpretation(interpretation_method_id, interpretation_method_config)\n\n    return interpretation_method.interpret(img, self)\n</code></pre>"},{"location":"dev/api/template/internal_matching_result/","title":"Internal matching result","text":""},{"location":"dev/api/template/internal_matching_result/#officialeye._internal.template.internal_matching_result.InternalMatchingResult","title":"<code>InternalMatchingResult</code>","text":"<p>             Bases: <code>SharedMatchingResult</code></p> <p>Representation of the matching result, designed to be used by the child process only.</p> Source code in <code>src/officialeye/_internal/template/internal_matching_result.py</code> <pre><code>class InternalMatchingResult(SharedMatchingResult):\n    \"\"\"\n    Representation of the matching result, designed to be used by the child process only.\n    \"\"\"\n\n    def __init__(self, template: InternalTemplate, /):\n        super().__init__(template)\n\n        self._template_id = template.identifier\n\n        # keys: keypoint ids\n        # values: matches with this keypoint\n        self._matches_dict: Dict[str, List[IMatch]] = {}\n\n        for keypoint in self.template.keypoints:\n            self._matches_dict[keypoint.identifier] = []\n\n    @property\n    def template(self) -&gt; InternalTemplate:\n        return get_internal_context().get_template(self._template_id)\n</code></pre>"},{"location":"dev/api/template/internal_supervision_result/","title":"Internal supervision result","text":""},{"location":"dev/api/template/internal_template/","title":"Internal template","text":""},{"location":"dev/api/template/keypoint/","title":"Keypoint","text":""},{"location":"dev/api/template/region/","title":"Region","text":""},{"location":"dev/api/template/shared_matching_result/","title":"Shared matching result","text":""},{"location":"dev/api/template/shared_matching_result/#officialeye._internal.template.shared_matching_result.SharedMatchingResult","title":"<code>SharedMatchingResult</code>","text":"<p>             Bases: <code>IMatchingResult</code>, <code>ABC</code></p> <p>This class contains all the logic of the matching result instance, irrespective of whether we use the internal or the external representation. The parent process uses the internal representation, whereas the external representation is only for the child process. This class represents the aspects that both representations have in common. Therefore, it is important that this class operates only on the interface level and is picklable.</p> Source code in <code>src/officialeye/_internal/template/shared_matching_result.py</code> <pre><code>class SharedMatchingResult(IMatchingResult, ABC):\n    \"\"\"\n    This class contains all the logic of the matching result instance, irrespective of whether we use the internal or the external representation.\n    The parent process uses the internal representation, whereas the external representation is only for the child process.\n    This class represents the aspects that both representations have in common.\n    Therefore, it is important that this class operates only on the interface level and is picklable.\n    \"\"\"\n\n    def __init__(self, template: ITemplate, /):\n        # keys: keypoint ids\n        # values: matches with this keypoint\n        self._matches_dict: Dict[str, List[IMatch]] = {}\n\n        for keypoint in template.keypoints:\n            self._matches_dict[keypoint.identifier] = []\n\n    def remove_all_matches(self):\n        self._matches_dict = {}\n\n    def add_match(self, match: IMatch, /):\n        assert match.keypoint.identifier in self._matches_dict\n        self._matches_dict[match.keypoint.identifier].append(match)\n\n    def get_all_matches(self) -&gt; Iterable[IMatch]:\n        for keypoint_id in self._matches_dict:\n            for match in self._matches_dict[keypoint_id]:\n                yield match\n\n    def get_total_match_count(self) -&gt; int:\n        match_count = 0\n        for keypoint_id in self._matches_dict:\n            match_count += len(self._matches_dict[keypoint_id])\n        return match_count\n\n    def get_keypoint_ids(self) -&gt; Iterable[str]:\n        for keypoint_id in self._matches_dict:\n            yield keypoint_id\n\n    def get_matches_for_keypoint(self, keypoint_id: str, /) -&gt; Iterable[IMatch]:\n        for match in self._matches_dict[keypoint_id]:\n            yield match\n\n    def validate(self):\n\n        get_internal_afi().info(Verbosity.DEBUG, \"Validating the keypoint matching result.\")\n\n        assert len(self._matches_dict) &gt; 0\n\n        total_match_count = 0\n\n        # verify that for every keypoint, it has been matched a number of times that is in the desired bounds\n        for keypoint_id in self._matches_dict:\n            keypoint = self.template.get_keypoint(keypoint_id)\n\n            keypoint_matches_min = keypoint.matches_min\n            keypoint_matches_max = keypoint.matches_max\n\n            keypoint_matches_count = len(self._matches_dict[keypoint_id])\n\n            if keypoint_matches_count &lt; keypoint_matches_min:\n                raise ErrMatchingMatchCountOutOfBounds(\n                    f\"while checking that keypoint '{keypoint_id}' of template '{self.template.identifier}' \"\n                    f\"has been matched a sufficient number of times\",\n                    f\"Expected at least {keypoint_matches_min} matches, got {keypoint_matches_count}\"\n                )\n\n            if keypoint_matches_count &gt; keypoint_matches_max:\n\n                get_internal_afi().info(\n                    Verbosity.INFO_VERBOSE,\n                    f\"Keypoint '{keypoint_id}' of template '{self.template.identifier}' has too many matches \"\n                    f\"(matches: {keypoint_matches_count} max: {keypoint_matches_max}). Cherry-picking the best matches.\")\n                # cherry-pick the best matches\n                self._matches_dict[keypoint_id] = sorted(self._matches_dict[keypoint_id])[-keypoint_matches_max:]\n                keypoint_matches_count = keypoint_matches_max\n            else:\n                get_internal_afi().info(\n                    Verbosity.INFO_VERBOSE,\n                    f\"Keypoint '{keypoint_id}' of template '{self.template.identifier}' has been matched {keypoint_matches_count} times \"\n                    f\"(min: {keypoint_matches_min} max: {keypoint_matches_max}).\"\n                )\n\n            total_match_count += keypoint_matches_count\n\n        assert total_match_count &gt;= 0\n        if total_match_count == 0:\n            raise ErrMatchingMatchCountOutOfBounds(\n                f\"while checking that there has been at least one match for template '{self.template.identifier}'.\",\n                \"There have been no matches.\"\n            )\n        elif total_match_count &lt; 3:\n            raise ErrMatchingMatchCountOutOfBounds(\n                f\"while checking that there has been at least three matches for template '{self.template.identifier}'.\",\n                \"There have been less than three matches.\"\n            )\n</code></pre>"},{"location":"dev/api/template/utils/","title":"Utils","text":""},{"location":"dev/api/template/feature_class/","title":"Index","text":"<p>Module containing everything needed to use feature classes.</p>"},{"location":"dev/api/template/feature_class/const/","title":"Const","text":""},{"location":"dev/api/template/feature_class/feature_class/","title":"Feature class","text":""},{"location":"dev/api/template/feature_class/feature_class/#officialeye._internal.template.feature_class.feature_class.FeatureClass","title":"<code>FeatureClass</code>","text":"Source code in <code>src/officialeye/_internal/template/feature_class/feature_class.py</code> <pre><code>class FeatureClass:\n\n    def __init__(self, manager, class_id: str, def_dict: Dict[str, any], /):\n        self._manager = manager\n        self.class_id = class_id\n        self.is_inline = False\n\n        self._data = {\n            \"abstract\": False,\n            \"inherits\": IMPLICIT_FEATURE_CLASS_BASE_INSTANCE_ID,\n            **def_dict\n        }\n\n    def is_global_base_class(self) -&gt; bool:\n        return self.class_id == IMPLICIT_FEATURE_CLASS_BASE_INSTANCE_ID\n\n    def get_parent_class(self):\n        assert self.class_id != IMPLICIT_FEATURE_CLASS_BASE_INSTANCE_ID, \"The global base class has no parent\"\n        parent_id = self._data[\"inherits\"]\n        return self._manager.get_class(parent_id)\n\n    def is_abstract(self) -&gt; bool:\n        return self._data[\"abstract\"]\n\n    def get_features(self):\n        \"\"\"\n        Generates all features that inherit this class (or belong to it directly)\n        \"\"\"\n\n        template = self._manager.get_template()\n\n        for cur_feature in template.features():\n            cur_feature_class = cur_feature.get_feature_class()\n\n            if cur_feature_class is None:\n                continue\n\n            # search in cur_feature's parents for the present class\n            while not cur_feature_class.is_global_base_class():\n\n                if cur_feature_class == self:\n                    yield cur_feature\n                    # we already found this class among the parents, no need to go deeper\n                    break\n\n                cur_feature_class = cur_feature_class.get_parent_class()\n\n    def inline(self):\n        \"\"\"\n        Computes all inherited attributes and applies diffs accordingly.\n        The result gets cached so that they do not have to be computed every time.\n\n        Raises: DiffObjectException\n        \"\"\"\n\n        if self.is_inline:\n            return\n\n        class_parents_stack = []\n        current_class = self\n\n        while not current_class.is_global_base_class():\n            class_parents_stack.append(current_class)\n            current_class = current_class.get_parent_class()\n\n        if len(class_parents_stack) == 0:\n            class_parents_stack = [self]\n\n        expansion = DiffObjectExpansion(feature_class_object_specification)\n\n        while len(class_parents_stack) &gt; 0:\n            ancestor = class_parents_stack.pop()\n            expansion.add(ancestor._data)\n\n            if ancestor.is_abstract():\n                ancestor_inlined = expansion.get_current_partial_object()\n            else:\n                ancestor_inlined = expansion.get_full_object()\n\n            ancestor.is_inline = True\n            ancestor._data = ancestor_inlined\n\n        assert self.is_inline\n\n    def get_data(self) -&gt; Dict[str, any]:\n        return self._data\n</code></pre>"},{"location":"dev/api/template/feature_class/feature_class/#officialeye._internal.template.feature_class.feature_class.FeatureClass.get_features","title":"<code>get_features()</code>","text":"<p>Generates all features that inherit this class (or belong to it directly)</p> Source code in <code>src/officialeye/_internal/template/feature_class/feature_class.py</code> <pre><code>def get_features(self):\n    \"\"\"\n    Generates all features that inherit this class (or belong to it directly)\n    \"\"\"\n\n    template = self._manager.get_template()\n\n    for cur_feature in template.features():\n        cur_feature_class = cur_feature.get_feature_class()\n\n        if cur_feature_class is None:\n            continue\n\n        # search in cur_feature's parents for the present class\n        while not cur_feature_class.is_global_base_class():\n\n            if cur_feature_class == self:\n                yield cur_feature\n                # we already found this class among the parents, no need to go deeper\n                break\n\n            cur_feature_class = cur_feature_class.get_parent_class()\n</code></pre>"},{"location":"dev/api/template/feature_class/feature_class/#officialeye._internal.template.feature_class.feature_class.FeatureClass.inline","title":"<code>inline()</code>","text":"<p>Computes all inherited attributes and applies diffs accordingly. The result gets cached so that they do not have to be computed every time.</p> <p>Raises: DiffObjectException</p> Source code in <code>src/officialeye/_internal/template/feature_class/feature_class.py</code> <pre><code>def inline(self):\n    \"\"\"\n    Computes all inherited attributes and applies diffs accordingly.\n    The result gets cached so that they do not have to be computed every time.\n\n    Raises: DiffObjectException\n    \"\"\"\n\n    if self.is_inline:\n        return\n\n    class_parents_stack = []\n    current_class = self\n\n    while not current_class.is_global_base_class():\n        class_parents_stack.append(current_class)\n        current_class = current_class.get_parent_class()\n\n    if len(class_parents_stack) == 0:\n        class_parents_stack = [self]\n\n    expansion = DiffObjectExpansion(feature_class_object_specification)\n\n    while len(class_parents_stack) &gt; 0:\n        ancestor = class_parents_stack.pop()\n        expansion.add(ancestor._data)\n\n        if ancestor.is_abstract():\n            ancestor_inlined = expansion.get_current_partial_object()\n        else:\n            ancestor_inlined = expansion.get_full_object()\n\n        ancestor.is_inline = True\n        ancestor._data = ancestor_inlined\n\n    assert self.is_inline\n</code></pre>"},{"location":"dev/api/template/feature_class/loader/","title":"Loader","text":""},{"location":"dev/api/template/feature_class/manager/","title":"Manager","text":""},{"location":"dev/api/template/schema/","title":"Index","text":"<p>Template specifications have a lot of fields and properties. Therefore, their proper validation is a serious task. The main aim of this module is to build a schema for the entire template specification, so that it is possible to automatically validate user imput against that schema, before continuing to process it.</p>"},{"location":"dev/api/template/schema/loader/","title":"Loader","text":""},{"location":"dev/api/template/schema/loader/#officialeye._internal.template.schema.loader.load_template","title":"<code>load_template(path)</code>","text":"<p>Loads a template from a file located at the specified path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the YAML template configuration file.</p> required <p>Returns:</p> Type Description <code>InternalTemplate</code> <p>Loaded template.</p> <p>Raises:</p> Type Description <code>OEError</code> <p>In case there has been an error validating the correctness of the template.</p> Source code in <code>src/officialeye/_internal/template/schema/loader.py</code> <pre><code>def load_template(path: str, /) -&gt; InternalTemplate:\n    \"\"\"\n    Loads a template from a file located at the specified path.\n\n    Arguments:\n        path: The path to the YAML template configuration file.\n\n    Returns:\n        Loaded template.\n\n    Raises:\n        OEError: In case there has been an error validating the correctness of the template.\n    \"\"\"\n\n    template = get_internal_context().get_template_by_path(path)\n\n    if template is not None:\n        get_internal_afi().info(Verbosity.DEBUG, f\"Template at path '{path}' has already been loaded and cached, reusing it!\")\n        return template\n\n    get_internal_afi().info(Verbosity.DEBUG, f\"Template at path '{path}' has not yet been loaded, loading it.\")\n\n    return _do_load_template(path)\n</code></pre>"},{"location":"dev/api/template/schema/schema/","title":"Schema","text":""},{"location":"usage/examples/","title":"Examples","text":""},{"location":"usage/examples/#retrieving-information-from-a-drivers-license-photo","title":"Retrieving Information from a Driver's License Photo","text":"<p>In this example, we'll showcase how OfficialEye simplifies the extraction of information from a driver's license photo, even when faced with challenges such as low image quality, rotation, zoom, and varying angles.</p>"},{"location":"usage/examples/#template-creation","title":"Template creation","text":"<p>Start by obtaining a properly positioned and high-quality image of a driver's license, which will serve as the template for OfficialEye. This template image acts as the reference point for recognizing similar documents in other images.</p> <p>For demonstration purposes, let's use the following scan of a driver's license.</p> Template image <p></p> <p>Next, we initialize a new template configuration file using the following command.</p> <pre><code>officialeye create driver_license_ru.yml driver_license_ru.jpg\n</code></pre> <p>This command generates a <code>driver_license_ru.yml</code> file initialized with default values, based on the provided <code>driver_license_template.jpg</code> template image file. We open this file in a text editor with syntax highlighting for convenient customization.</p>"},{"location":"usage/examples/#template-configuration","title":"Template configuration","text":"<p>In the generated <code>driver_license_ru.yml</code> file, we now need to customize default configuration values in the following sections.</p>"},{"location":"usage/examples/#id-and-name","title":"ID and Name","text":"<ul> <li>We change the <code>id</code> field to an alphanumeric and unique identifier for the template, in this case <code>driver_license_ru</code>.</li> <li>(Optional) We modify the name field, for example, to <code>Driver License RU</code>, to indicate the template's association with a Russian driver's license.</li> </ul> driver_license_ru.yml (fragment)<pre><code>id: \"driver_license_ru\"\nname: \"Driver License RU\"\n</code></pre>"},{"location":"usage/examples/#keypoints","title":"Keypoints","text":"<p>Keypoints are rectangular regions that should exist in most documents of the specified kind, serving as reference points to establish correspondences between the positions in the input image and the template image. Careful selection of keypoints is essential for accurate and reliable document analysis. In the present example, it makes sense to define the following keypoints.</p> driver_license_ru.yml (fragment)<pre><code>keypoints:\n  title: # (1)!\n    x: 453 # (2)!\n    y: 55 # (3)!\n    w: 792 # (4)!\n    h: 70 # (5)!\n    matches: # (6)!\n      min: 15 # (7)!\n      max: 50 # (8)!\n  rus_symbol:\n    x: 138\n    y: 33\n    w: 187\n    h: 109\n    matches:\n      min: 2\n      max: 30\n  heading_bar:\n    x: 441\n    y: 154\n    w: 96\n    h: 610\n    matches:\n      min: 5\n      max: 30\n  heading_4b:\n    x: 802\n    y: 432\n    w: 67\n    h: 49\n    matches:\n      min: 1\n      max: 10\n  heading_67:\n    x: 58\n    y: 663\n    w: 51\n    h: 106\n    matches:\n      min: 3\n      max: 10\n  b_b1:\n    x: 531\n    y: 681\n    w: 141\n    h: 78\n    matches:\n      min: 0\n      max: 20\n</code></pre> <ol> <li><code>title</code> is the name of the keypoint.</li> <li>The x-coordinate of the top left corner of the rectangle (measured in pixels). Remember that the origin is located in the top left corner of the image. In other words, the x-axis points to the right, and the y-axis points down (not up!).</li> <li>The y-coordinate of the top left corner of the rectangle (measured in pixels). Remember that the origin is located in the top left corner of the image. In other words, the x-axis points to the right, and the y-axis points down (not up!).</li> <li>Width of the rectangle (measured in pixels).</li> <li>Height of the rectangle (measured in pixels).</li> <li>A match is a correspondence between a point in the template image and a point in the input image.</li> <li>Minimum number of matches that should be identified within this keypoint's region when analyzing an image.</li> <li>Maximum number of matches that should be identified within this keypoint's region when analyzing an image.</li> </ol> <p>Not familiar with the above syntax?</p> <p>Above we have used <code>YAML</code> syntax. If you are not familiar with it, read this page.</p> <p>Each keypoint should have a unique name and is defined by coordinates, width and height. This data can be easily collected by selecting the region of interest in any image editing program. Note that the origin is always located in the top left corner of the image. In other words, the x-axis points to the right, while the y-axis points down (not up!). A keypoint should also have a minimum and maximum number of matches defined. A match is a correspondence between a point in the template image and a point in the input image. Intuitively, the bounds on the match count allow us to specify the importance of a keypoint. For example, by setting the <code>matches.min</code> value of the <code>title</code> keypoint above to 15, we have explained that it is crucial to find at least 15 matches between that region and the input image. In case there are fewer matches, OfficialEye will conclude that the input image is not a valid driver's license photo. The upper bound on the match count is useful for preventing possible performance issues caused by an enormous number of matches.</p> <p>Note</p> <p>Having a sufficient number of keypoints, ideally distributed across different regions of the template image, enhances the tool's ability to infer the document's orientation accurately.</p> <p>The keypoint configuration can be visualized by running the following command.</p> <pre><code>officialeye show driver_license_ru.yml --hide-features\n</code></pre> Visualization of the template's keypoints <p></p>"},{"location":"usage/examples/#features","title":"Features","text":"<p>Features are rectangular regions located in the template image and containing specific information of interest, such as a piece of text within a document. Similar to keypoints, features are defined by providing the x, y coordinates of the top left corner of the rectangle, together with a width and height. In addition to this, every feature may belong to a specific feature class. Its name can be specified via the <code>class</code> field. In the present example, it makes sense to define the following features describing all the information of interest located in the driver's license template image.</p> driver_license_ru.yml (fragment)<pre><code>features:\n  last_name_ru: # (1)!\n    x: 525\n    y: 160\n    w: 600\n    h: 45\n    class: line_with_russian_text # (2)! \n  last_name_en:\n    x: 525\n    y: 200\n    w: 600\n    h: 35\n    class: line_with_english_text\n  name_ru:\n    x: 525\n    y: 235\n    w: 600\n    h: 45\n    class: line_with_russian_text\n  name_en:\n    x: 525\n    y: 275\n    w: 600\n    h: 35\n    class: line_with_english_text\n  birthday:\n    x: 525\n    y: 310\n    w: 600\n    h: 45\n    class: line_with_english_text\n  place_of_birth_ru:\n    x: 525\n    y: 350\n    w: 600\n    h: 40\n    class: line_with_russian_text\n  place_of_birth_en:\n    x: 525\n    y: 390\n    w: 600\n    h: 35\n    class: line_with_english_text\n  issue_date:\n    x: 525\n    y: 430\n    w: 250\n    h: 45\n    class: line_with_english_text\n  expiry_date:\n    x: 875\n    y: 430\n    w: 250\n    h: 45\n    class: line_with_english_text\n  issue_authority_ru:\n    x: 525\n    y: 475\n    w: 600\n    h: 40\n    class: line_with_russian_text\n  issue_authority_en:\n    x: 525\n    y: 510\n    w: 600\n    h: 40\n    class: line_with_english_text\n  identifier:\n    x: 525\n    y: 550\n    w: 600\n    h: 50\n    class: line_with_english_text\n  issue_place_ru:\n    x: 525\n    y: 595\n    w: 600\n    h: 40\n    class: line_with_russian_text\n  issue_place_en:\n    x: 525\n    y: 630\n    w: 600\n    h: 40\n    class: line_with_english_text\n  face:\n    x: 87\n    y: 192\n    w: 313\n    h: 460\n</code></pre> <ol> <li><code>last_name_ru</code> is the name of the feature.</li> <li>Optional: Name of the class this feature belongs to.</li> </ol>"},{"location":"usage/examples/#feature-classes","title":"Feature classes","text":"<p>Feature classes are a mechanism for grouping similar feature configurations together. This ensures readability and maintainability of large feature sets and their corresponding configurations. Apart from that, by organizing features into classes, you streamline the configuration process and ensure consistent settings for similar types of information.</p> <p>Above, we have already used two feature classes - <code>line_with_russian_text</code> and <code>line_with_english_text</code>. Therefore, we have to define these classes, for example, in the following way.</p> driver_license_ru.yml (fragment)<pre><code>feature_classes:\n  line_with_text: # (1)!\n    abstract: yes # (2)!\n    mutators: # (3)!\n    interpretation:\n      method: ocr_tesseract # (4)!\n      config: # (5)!\n        config: --dpi 1000\n  line_with_russian_text: # (6)!\n    inherits: line_with_text\n    interpretation:\n      config:\n        lang: rus # (7)!\n  line_with_english_text:\n    inherits: line_with_text\n    interpretation:\n      config:\n        lang: eng # (8)!\n</code></pre> <ol> <li><code>line_with_text</code> is the name of the feature class.</li> <li>Abstract feature classes cannot describe any concrete feature directly, but can be configured incompletely. Non-abstract classes can be used by features directly, but must be complete.</li> <li>A list of mutators to be applied before the feature is interpreted. For example, in the case of text processing, it makes sense to add a mutator performing denoising and character alignment here. </li> <li>Name of the interpretation method, which defines the way in which the feature region on the input image should be processed further.</li> <li>Interpretation method-specific configuration.</li> <li><code>line_with_russian_text</code> is the name of the feature class.</li> <li>Since this class inherits <code>line_with_text</code>, the <code>lang</code> value will get added to the configuration object that is passed to the Tesseract OCR engine. In this way, we can customize settings that are specific to recognizing the Russian language.</li> <li>Since this class inherits <code>line_with_text</code>, the <code>lang</code> value will get added to the configuration object that is passed to the Tesseract OCR engine. In this way, we can customize settings that are specific to recognizing the English language.</li> </ol> <p>In short, these class definitions tell OfficialEye to pass the segments of the recognized document containing Russian text to the Tesseract OCR engine launched in Russian language recognition mode. Similarly, fragments containing English text should be passed to Tesseract in English language recognition mode.</p> <p>In both cases, the way we interpret lines with text is we pass the corresponding fragments to an OCR engine. Therefore, it makes sense to abstract out the common configuration into a separate class called <code>line_with_text</code> and defined above. The <code>line_with_russian_text</code> and <code>line_with_english_text</code> simply inherit the <code>line_with_text</code> feature class and change language-specific configuration options. This inheritance can be visualized in the following way (nodes represent feature classes).</p> <pre><code>graph BT\n    line_with_text{line_with_text};\n    line_with_russian_text -- \"inherits\" --&gt; line_with_text;\n    line_with_english_text -- \"inherits\" --&gt; line_with_text;</code></pre> <p>With the feature classes and features properly configured, we can now verify that the configuration is valid by visualizing it:</p> <pre><code>officialeye show driver_license_ru.yml --hide-keypoints\n</code></pre> Visualization of the template's features <p></p>"},{"location":"usage/examples/#testing-document-analysis","title":"Testing document analysis","text":"<p>To test OfficialEye's document analysis and processing, we need an example image containing the document type the template is configured for, in this case, a photo of a driver's license. For the sake of the present demonstration, we shall use the following image.</p> example_01.jpg <p></p> <p>We can now tell OfficialEye to run the analysis algorithm and visualize the result by running the</p> <pre><code>officialeye test example_01.jpg driver_license_ru.yml\n</code></pre> <p>command, where <code>example_01.jpg</code> is the path to the input image (see above). The tool visualizes the result by replacing feature regions in the template image by the transformed version of the corresponding regions in the input image.</p> Result <p></p> <p>As we can see, OficialEye was able to successfully use the template we created to detect the driver's license in the input image, zoom and rotate all features accordingly.</p>"},{"location":"usage/examples/#running-document-analysis","title":"Running document analysis","text":"<p>Having configured the template and tested it, it is now time to run the full document analysis via the following command.</p> <pre><code>officialeye run example_01.jpg driver_license_ru.yml\n</code></pre> <p>As above, <code>example_01.jpg</code> is the path to the input image. As a result, we get the following JSON-serialized object containing the text OfficialEye was able to extract from every feature via the Tesseract OCR.</p> <pre><code>{\n    \"ok\": true,\n    \"template\": \"driver_license_ru\",\n    \"score\": 53,\n    \"features\": {\n        \"last_name_ru\": \"\u0421\u0423\u0420\u0413\u0423\u0422\u0421\u041a\u0418\u0419\",\n        \"last_name_en\": \"SURGUTSKI\",\n        \"name_ru\": \"\u0418\u0413\u041e\u0420\u042c \u0412\u041f\u0410\u041b\u0418\u0421\u041f\u0410\u0420\u041e\u0420\u0418\u0427\",\n        \"name_en\": \"IGOR VLADISLAVOVICH\",\n        \"birthday\": \"16.10.1986.\",\n        \"place_of_birth_ru\": \"\u041a\u041e\u0421\u0422\u0420\u041e\u041c\u0421\u041a\u0410\u042f \u041e\u0411\u041b.\",\n        \"place_of_birth_en\": \"KOSTROMSKAIA OBL.\",\n        \"issue_date\": \"15.12.2019\",\n        \"expiry_date\": \"15.12 2029\",\n        \"issue_authority_ru\": \"\u0413\u0418\u0411\u0414\u0414 4484\",\n        \"issue_authority_en\": \"GIBDD 4484.\",\n        \"identifier\": \"18 01 123456\",\n        \"issue_place_ru\": \"\u041a\u041e\u0421\u0422\u0420\u041e\u041c\u0421\u041a\u0410\u042f \u0421\u0411\u0415\u041f\",\n        \"issue_place_en\": \"KOSTROMSKAIA OBI __\"\n    }\n}\n</code></pre>"},{"location":"usage/examples/#full-configuration","title":"Full configuration","text":"<p>For the sake of completeness and convenience, we provide the full version of the template configuration file of the present example. </p> driver_license_ru.yml<pre><code>id: \"driver_license_ru\"\nname: \"Driver License RU\"\nsource: \"driver_license_ru.jpg\"\nmutators:\n  source:\n  target:\nkeypoints:\n  title:\n    x: 453\n    y: 55\n    w: 792\n    h: 70\n    matches:\n      min: 15\n      max: 50\n  rus_symbol:\n    x: 138\n    y: 33\n    w: 187\n    h: 109\n    matches:\n      min: 2\n      max: 30\n  heading_bar:\n    x: 441\n    y: 154\n    w: 96\n    h: 610\n    matches:\n      min: 5\n      max: 30\n  heading_4b:\n    x: 802\n    y: 432\n    w: 67\n    h: 49\n    matches:\n      min: 1\n      max: 10\n  heading_67:\n    x: 58\n    y: 663\n    w: 51\n    h: 106\n    matches:\n      min: 3\n      max: 10\n  b_b1:\n    x: 531\n    y: 681\n    w: 141\n    h: 78\n    matches:\n      min: 0\n      max: 20\nmatching:\n  engine: sift_flann\n  config:\n    sift_flann:\n      sensitivity: 0.7\nsupervision:\n  engine: combinatorial\n  config:\n    combinatorial:\n      min_match_factor: 0.1\n      max_transformation_error: 5\n  result: best_score\nfeatures:\n  last_name_ru:\n    x: 525\n    y: 160\n    w: 600\n    h: 45\n    class: line_with_russian_text\n  last_name_en:\n    x: 525\n    y: 200\n    w: 600\n    h: 35\n    class: line_with_english_text\n  name_ru:\n    x: 525\n    y: 235\n    w: 600\n    h: 45\n    class: line_with_russian_text\n  name_en:\n    x: 525\n    y: 275\n    w: 600\n    h: 35\n    class: line_with_english_text\n  birthday:\n    x: 525\n    y: 310\n    w: 600\n    h: 45\n    class: line_with_english_text\n  place_of_birth_ru:\n    x: 525\n    y: 350\n    w: 600\n    h: 40\n    class: line_with_russian_text\n  place_of_birth_en:\n    x: 525\n    y: 390\n    w: 600\n    h: 35\n    class: line_with_english_text\n  issue_date:\n    x: 525\n    y: 430\n    w: 250\n    h: 45\n    class: line_with_english_text\n  expiry_date:\n    x: 875\n    y: 430\n    w: 250\n    h: 45\n    class: line_with_english_text\n  issue_authority_ru:\n    x: 525\n    y: 475\n    w: 600\n    h: 40\n    class: line_with_russian_text\n  issue_authority_en:\n    x: 525\n    y: 510\n    w: 600\n    h: 40\n    class: line_with_english_text\n  identifier:\n    x: 525\n    y: 550\n    w: 600\n    h: 50\n    class: line_with_english_text\n  issue_place_ru:\n    x: 525\n    y: 595\n    w: 600\n    h: 40\n    class: line_with_russian_text\n  issue_place_en:\n    x: 525\n    y: 630\n    w: 600\n    h: 40\n    class: line_with_english_text\n  face:\n    x: 87\n    y: 192\n    w: 313\n    h: 460\nfeature_classes:\n  line_with_text:\n    abstract: yes\n    mutators:\n    interpretation:\n      method: ocr_tesseract\n      config:\n        config: --dpi 1000\n  line_with_russian_text:\n    inherits: line_with_text\n    interpretation:\n      config:\n        lang: rus\n  line_with_english_text:\n    inherits: line_with_text\n    interpretation:\n      config:\n        lang: eng\n</code></pre> <p>Getting started</p>"},{"location":"usage/getting-started/","title":"Setup Guide","text":""},{"location":"usage/getting-started/#installation","title":"Installation","text":"<p>OfficialEye requires Python 3.10+ to be installed. It works on multiple platforms including Linux, Windows and macOS.</p> <p>Note</p> <p>The project can be run on older Python versions. However, there will be neither support for them nor a guarantee that all features work.</p>"},{"location":"usage/getting-started/#installation-for-usage","title":"Installation for usage","text":""},{"location":"usage/getting-started/#recommended-installation-method","title":"Recommended installation method","text":"<p>Start by installing PIPX (if you haven't installed it already).</p> MacOSLinuxWindows <pre><code>brew install pipx\npipx ensurepath\n</code></pre> <pre><code>sudo apt install pipx\npipx ensurepath\n</code></pre> <pre><code>scoop install pipx\npipx ensurepath\n</code></pre> <p>Next, use <code>pipx</code> to install OfficialEye.</p> <pre><code>pipx install officialeye\n</code></pre>"},{"location":"usage/getting-started/#installation-via-pip","title":"Installation via PIP","text":"<p>The tool can also be installed with the standard <code>pip</code> installation command:</p> <pre><code>pip install officialeye --break-system-packages\n</code></pre> <p>Warning</p> <p>The above command installs the package globally, which is not recommended due to possible conflicts between OS package managers and python-specific package management tools (see PEP 668).</p>"},{"location":"usage/getting-started/#installation-for-development","title":"Installation for development","text":"<p>To set up the development environment on a Linux (prefferably Ubuntu) computer, start by cloning the GitHub repository and navigating to the projects' root directory:</p> <pre><code>git clone https://github.com/ZeroBone/OfficialEye.git &amp;&amp; cd OfficialEye\n</code></pre> <p>Next, install the PDM package manager:</p> <pre><code>curl -sSL https://pdm-project.org/install-pdm.py | python3 -\n</code></pre> <p>Note</p> <p>PDM will not work without the <code>python3-venv</code> package. Make sure to have <code>curl</code> and <code>python3-venv</code> installed before running the above command.</p> <p>Next, initialize a new <code>venv</code> environment via <pre><code>pdm venv create\n</code></pre> and enter it by running <pre><code>source .venv/bin/activate\n</code></pre></p> <p>At this point, a prefix of the form <code>(officialeye-x.xx)</code> should appear in the terminal. To complete the setup, run the following commands to install the dependencies and the <code>officialeye</code> package in editable mode.</p> <pre><code>pdm install\n</code></pre> <p>Success</p> <p>The tool should now be available via the <code>officialeye</code> command. Note that if you leave the virtual environment, the <code>officialeye</code> command will no longer be available. Therefore, it is important to not forget to reenter <code>venv</code> via the <pre><code>source .venv/bin/activate\n</code></pre> command.</p> <p>YAML Basics</p>"},{"location":"usage/getting-started/architecture/","title":"Architecture","text":"<p>Warning</p> <p>This page is in a work-in-progress state and might be incomplete or have many defects.</p> <pre><code>graph TB\n    start_node[Start] --&gt;|Input Image &amp; Templates| unification_phase{{Unification Phase}};\n    end_node[End];\n    io_driver{{IO Driver}};\n\n    unification_phase -- \"Unified feature images\" --&gt; interpretation_phase{{Interpretation Phase}} -- \"Interpretation Result\" --&gt; io_driver;\n\n    unification_phase &amp; interpretation_phase -. \"Errors\" .-&gt; io_driver;\n    io_driver -- \"Output\" --&gt; end_node;</code></pre>"},{"location":"usage/getting-started/yaml-basics/","title":"YAML Basics","text":"<p>OfficialEye uses the YAML (<code>.yml</code>) format for all configuration files.</p>"},{"location":"usage/getting-started/yaml-basics/#what-is-yaml","title":"What is YAML?","text":"<p>YAML is a data-serialization language that is both readable for humans and easily parseable by computers.</p> <p>YAML is <code>key: \"value\"</code> based. This means you use a key to get a certain value. Values should be surrounded by double quotes (<code>\"...\"</code>). This can be demonstrated using the following example.</p> YAML Data Format<pre><code>key: \"value\"\ncat: \"Some text data about the cat\"\n</code></pre> <p>Now the key <code>cat</code> can be used to obtain <code>Some text data about the cat</code>.</p> <p>Keys and values can also be nested into each other. Then they must be indented with two spaces.</p> Nested YAML<pre><code>outer_name:\n  inner_name: \"inner_value\"\n  another_key: \"OfficialEye is great!\"\n</code></pre> <p>Tabs are not supported. Use spaces instead.</p>"},{"location":"usage/getting-started/yaml-basics/#further-reading","title":"Further reading","text":"<p>For more information about the <code>YAML</code> format, we refer you to this tutorial. Note that in fact, due to security and compatibility reasons, OfficialEye uses only a subset of <code>YAML</code> called strictyaml, meaning that not all YAML features are supported.</p>"},{"location":"usage/other/license/","title":"GNU GENERAL PUBLIC LICENSE","text":"<p>Version 3, 29 June 2007</p> <p>Copyright (C) 2007 Free Software Foundation, Inc. http://fsf.org/</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"usage/other/license/#preamble","title":"Preamble","text":"<p>The GNU General Public License is a free, copyleft license for software and other kinds of works.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.</p> <p>Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.</p> <p>For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.</p> <p>Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.</p> <p>Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"usage/other/license/#terms-and-conditions","title":"TERMS AND CONDITIONS","text":""},{"location":"usage/other/license/#0-definitions","title":"0. Definitions","text":"<p>\"This License\" refers to version 3 of the GNU General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>"},{"location":"usage/other/license/#1-source-code","title":"1. Source Code","text":"<p>The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p>"},{"location":"usage/other/license/#2-basic-permissions","title":"2. Basic Permissions","text":"<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>"},{"location":"usage/other/license/#3-protecting-users-legal-rights-from-anti-circumvention-law","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law","text":"<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p>"},{"location":"usage/other/license/#4-conveying-verbatim-copies","title":"4. Conveying Verbatim Copies","text":"<p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>"},{"location":"usage/other/license/#5-conveying-modified-source-versions","title":"5. Conveying Modified Source Versions","text":"<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <p>{:style=\"list-style-type:lower-latin\"} 1.  The work must carry prominent notices stating that you modified     it, and giving a relevant date. 2.  The work must carry prominent notices stating that it is     released under this License and any conditions added under     section 7. This requirement modifies the requirement in section 4     to \"keep intact all notices\". 3.  You must license the entire work, as a whole, under this     License to anyone who comes into possession of a copy. This     License will therefore apply, along with any applicable section 7     additional terms, to the whole of the work, and all its parts,     regardless of how they are packaged. This License gives no     permission to license the work in any other way, but it does not     invalidate such permission if you have separately received it. 4.  If the work has interactive user interfaces, each must display     Appropriate Legal Notices; however, if the Program has interactive     interfaces that do not display Appropriate Legal Notices, your     work need not make them do so.</p> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>"},{"location":"usage/other/license/#6-conveying-non-source-forms","title":"6. Conveying Non-Source Forms","text":"<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <p>{:style=\"list-style-type:lower-latin\"} 1.  Convey the object code in, or embodied in, a physical product     (including a physical distribution medium), accompanied by the     Corresponding Source fixed on a durable physical medium     customarily used for software interchange. 2.  Convey the object code in, or embodied in, a physical product     (including a physical distribution medium), accompanied by a     written offer, valid for at least three years and valid for as     long as you offer spare parts or customer support for that product     model, to give anyone who possesses the object code either (1) a     copy of the Corresponding Source for all the software in the     product that is covered by this License, on a durable physical     medium customarily used for software interchange, for a price no     more than your reasonable cost of physically performing this     conveying of source, or (2) access to copy the Corresponding     Source from a network server at no charge. 3.  Convey individual copies of the object code with a copy of the     written offer to provide the Corresponding Source. This     alternative is allowed only occasionally and noncommercially, and     only if you received the object code with such an offer, in accord     with subsection 6b. 4.  Convey the object code by offering access from a designated     place (gratis or for a charge), and offer equivalent access to the     Corresponding Source in the same way through the same place at no     further charge. You need not require recipients to copy the     Corresponding Source along with the object code. If the place to     copy the object code is a network server, the Corresponding Source     may be on a different server (operated by you or a third party)     that supports equivalent copying facilities, provided you maintain     clear directions next to the object code saying where to find the     Corresponding Source. Regardless of what server hosts the     Corresponding Source, you remain obligated to ensure that it is     available for as long as needed to satisfy these requirements. 5.  Convey the object code using peer-to-peer transmission,     provided you inform other peers where the object code and     Corresponding Source of the work are being offered to the general     public at no charge under subsection 6d.</p> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>"},{"location":"usage/other/license/#7-additional-terms","title":"7. Additional Terms","text":"<p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <p>{:style=\"list-style-type:lower-latin\"} 1.  Disclaiming warranty or limiting liability differently from the     terms of sections 15 and 16 of this License; or 2.  Requiring preservation of specified reasonable legal notices or     author attributions in that material or in the Appropriate Legal     Notices displayed by works containing it; or 3.  Prohibiting misrepresentation of the origin of that material,     or requiring that modified versions of such material be marked in     reasonable ways as different from the original version; or 4.  Limiting the use for publicity purposes of names of licensors     or authors of the material; or 5.  Declining to grant rights under trademark law for use of some     trade names, trademarks, or service marks; or 6.  Requiring indemnification of licensors and authors of that     material by anyone who conveys the material (or modified versions     of it) with contractual assumptions of liability to the recipient,     for any liability that these contractual assumptions directly     impose on those licensors and authors.</p> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>"},{"location":"usage/other/license/#8-termination","title":"8. Termination","text":"<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>"},{"location":"usage/other/license/#9-acceptance-not-required-for-having-copies","title":"9. Acceptance Not Required for Having Copies","text":"<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>"},{"location":"usage/other/license/#10-automatic-licensing-of-downstream-recipients","title":"10. Automatic Licensing of Downstream Recipients","text":"<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>"},{"location":"usage/other/license/#11-patents","title":"11. Patents","text":"<p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>"},{"location":"usage/other/license/#12-no-surrender-of-others-freedom","title":"12. No Surrender of Others' Freedom","text":"<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>"},{"location":"usage/other/license/#13-use-with-the-gnu-affero-general-public-license","title":"13. Use with the GNU Affero General Public License","text":"<p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.</p>"},{"location":"usage/other/license/#14-revised-versions-of-this-license","title":"14. Revised Versions of this License","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>"},{"location":"usage/other/license/#15-disclaimer-of-warranty","title":"15. Disclaimer of Warranty","text":"<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"usage/other/license/#16-limitation-of-liability","title":"16. Limitation of Liability","text":"<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"usage/other/license/#17-interpretation-of-sections-15-and-16","title":"17. Interpretation of Sections 15 and 16","text":"<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p>"},{"location":"usage/scripting/feature-classes/","title":"Feature classes","text":"<p>Warning</p> <p>This page is in a work-in-progress state and might be incomplete or have many defects.</p>"},{"location":"usage/scripting/interpretation-methods/","title":"Interpretation methods","text":"<p>Warning</p> <p>This page is in a work-in-progress state and might be incomplete or have many defects.</p>"},{"location":"usage/scripting/matching-engines/","title":"Matching engines","text":"<p>Warning</p> <p>This page is in a work-in-progress state and might be incomplete or have many defects.</p>"},{"location":"usage/scripting/mutators/","title":"Mutators","text":"<p>Warning</p> <p>This page is in a work-in-progress state and might be incomplete or have many defects.</p>"},{"location":"usage/scripting/overview/","title":"Overview","text":"<p>Warning</p> <p>This page is in a work-in-progress state and might be incomplete or have many defects.</p>"},{"location":"usage/scripting/supervision-engines/","title":"Supervision engines","text":"<p>Warning</p> <p>This page is in a work-in-progress state and might be incomplete or have many defects.</p>"}]}